#!/usr/bin/env bash

if   [[ $HOME == /rds/general/user/rtagirov/home ]]; then 

     scr=$HOME/nessy/scr

elif [[ $HOME == /home/rtagirov ]]; then 

     scr=/mnt/SSD/sim/nessy/scr

else

     abort "Unknown HOME directory."

fi

source $scr/fioss.settings
source $scr/aux_func.sh
source $scr/helper_scripts

if [ -z "$1" ] || [ -z "$2" ]; then abort "One or more arguments are missing."; fi

if [[ "$0" =~ '((/bin/)|(^-))bash' ]]; then
  # We want to copy the scrip to the run directory. Not possible if sourced
  echo "Error: Script must be called, not sourced! - exit"
else

function error_f(){
__ERROR_F=""
echo -n "Checking the files..."
 for A in $@; do 
   if [[ -a $1 ]]; then echo -n;  else
     echo
     echo "File/Directory not found: $1"
     __ERROR_F=1
   fi;
 done
 echo " done. $__ERROR_F"
 [[ "$__ERROR_F" == "" ]] || error "File/Directory not found"
}

function error_ifunset() {
  ERRVAR=""
  for A in $@; do 
    [[ `getVar $A` == "" ]] &&  ERRVAR="$ERRVAR $A"
  done
  [[ $ERRVAR == "" ]] ||  error "Variable(s)$ERRVAR is/are not set"
}
trap error ERR
SCRIPT="$0"

[[ `dirname $0` == '.' ]] && SCRIPT=`pwd`/`basename $SCRIPT`
CP='kfmclient copy'
CP='cp -rfv'

change_dir $BASE_DIR

error_ifunset CROSS_SECTION_FILES    \
              ORIG_COSI       ORIG_EXE        VELO_FILE              \
              INPUT_SUN_FILE  INPUT_STARK_BROAD  LINELISTS           \
              OUTPUT_DIR 


# Frequencies to calculate - FREQ_START:FREQ_STEP:FREQ_STOP
function isSet(){
 [[ 'X'$1 != 'X' ]]
}

echo \
"--------------------------------------------------------------------------------------------------------------------------------------------------
ORIG_COSI =         $ORIG_COSI
ORIG_EXE =          $ORIG_EXE
VELO_FILE =         $VELO_FILE
INPUT_SUN_FILE =    $INPUT_SUN_FILE
INPUT_STARK_BROAD = $INPUT_STARK_BROAD
LINELISTS =         $LINELISTS
OUTPUT_DIR =        $OUTPUT_DIR
X_SECTION_FILES =   $CROSS_SECTION_FILES
--------------------------------------------------------------------------------------------------------------------------------------------------"; echo

error_f  $ORIG_COSI  $ORIG_EXE  $VELO_FILE   $INPUT_SUN_FILE  $INPUT_STARK_BROAD  $LINELISTS  $CROSS_SECTION_FILES 

set -v

rm_dir $OUTPUT_DIR; create_dir $OUTPUT_DIR; change_dir $OUTPUT_DIR

cmd "$CP $ORIG_COSI/fioss.exe ./"

$CP ${ORIG_COSI}/atm.inp     ./
$CP ${ORIG_COSI}/datom.inp   ./
$CP ${ORIG_COSI}/fgrid.inp   ./
$CP ${ORIG_COSI}/MODFILE     ./
$CP ${ORIG_COSI}/RADIOC      ./
$CP ${ORIG_COSI}/RADIOL      ./
$CP ${ORIG_COSI}/POPNUM      ./
$CP ${ORIG_COSI}/MolConc.txt ./
$CP ${ORIG_COSI}/mu          ./

#$CP $mol/c2.asc             ./
#$CP $mol/ch.asc             ./
#$CP $mol/cn.asc             ./
#$CP $mol/co.asc             ./
#$CP $mol/h2.asc             ./
#$CP $mol/nh.asc             ./
#$CP $mol/oh.asc             ./
#$CP $mol/o2.asc             ./
#$CP $mol/O2_H               ./

$CP $dat/fudge_As.txt        ./

$CP $INPUT_STARK_BROAD/*     ./
$CP ${VELO_FILE}             ./VELO
$CP $INPUT_SUN_FILE          ./input_sun

if [ -f $NTW_FILE ]; then $CP $NTW_FILE ./; fi
if [ -f $NTP_FILE ]; then $CP $NTP_FILE ./; fi

if [ -d ${ORIG_COSI}/src/ ]; then cmd "cp -r ${ORIG_COSI}/src/  ./"; fi

if [ $ODF_IT -eq 0 ]; then
	
   cmd "$CP $inp/car/CARDS.FIOSS.TEMPLATE ./CARDS.TEMPLATE"
   
else

   if [ -f $F_DIR/IT$PREV_ODF_IT/$RUN/CARDS.TEMPLATE ]; then

      cmd "$CP $F_DIR/IT$PREV_ODF_IT/$RUN/CARDS.TEMPLATE ./CARDS.TEMPLATE"

   else

      cmd "$CP $inp/car/CARDS.FIOSS.TEMPLATE ./CARDS.TEMPLATE"

   fi

fi

if [ ! -d $LINELISTS ]; then abort "The directory $LINELISTS with the linelists does not exist."; fi

ls ${LINELISTS}* &> /dev/null

exit_if_error "The linelists have not been found. The directory $LINELISTS is empty."

ln -sv $LINELISTS fort.19.d

ln -sv ${CROSS_SECTION_FILES} ./crs

ln -sv $mol ./mol

if ( isSet $ORIG_COSI2 ); then
  echo "Overwriting files from $ORIG_COSI with files from $ORIG_COSI2 in `pwd`"
   cp -rf $ORIG_COSI2/* ./
fi;

cat > fort.55 << eof
0 40 1
1 0 0
0 70717273 29 25 0 0 0
4003. 6000. 30. 1.e-40 10.
XXXXX
eof

cat > fort.56 << eof
30
    1      -1.000
    2      -1.000
    3      -1.000
    4      -1.000
    5      -1.000
    6      -1.000
    7      -1.000
    8      -1.000
    9      -1.000
   10      -1.000
   11      -1.000
   12      -1.000
   13      -1.000
   14      -1.000
   15      -1.000
   16      -1.000
   17      -1.000
   18      -1.000
   19      -1.000
   20      -1.000
   21      -1.000
   22      -1.000
   23      -1.000
   24      -1.000
   25      -1.000
   26      -1.000
   27      -1.000
   28      -1.000
   29      -1.000
   30      -1.000
eof

echo -e "\nFIOSS run $OUTPUT_DIR/ has been prepared.\n"

chmod u+rwx -R $OUTPUT_DIR

fi
