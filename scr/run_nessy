#!/usr/bin/env bash

base=/mnt/SSD/sim

base_hdd=/mnt/HDD/sim

runs=$base/runs

runs_hdd=$base_hdd/runs

FI_BASE_DIR=$runs/fioss
HM_BASE_DIR=$runs/hminus

HM_BASE_HDD_DIR=$runs_hdd/hminus

LBKG_DIR=$runs/lbkg

nessy=$base/nessy

nessy_scr=$nessy/scr

nessy_src=$nessy/src

nessy_inp=$nessy/inp

nessy_obj=$nessy/obj

source $nessy_scr/aux_func.sh

HM_JOB_FILE=fort.99

LBKG_CONTROL_FILE=$LBKG_DIR/CARDS.LOPA

TIME_BUFFER=20

LTE_JOB=lte

HM_LOG=hminus.log
HM_LOG_LTE=hminus_lte.log
HMP_LOG=hminus_prepare.log
FI_LOG_UVI=fioss.log.uvi
FI_LOG_RAD=fioss.log.rad
FIP_LOG=fioss_prepare.log
ODF_LOG=odf.log

ITX_DIR=$FI_BASE_DIR/ITx/

HM_GENERIC_DIR=$nessy_inp/gen

HM_EXE_NAME=hminus.exe
FI_EXE_NAME=fioss.exe

HM_EXE=$nessy_obj/$HM_EXE_NAME
FI_EXE=$nessy_obj/$FI_EXE_NAME

RadioShellScriptName=run_fioss_do2_radio

XTERM_CMD_FILE_NAME=.XTERM.cmd

src_prof="source ~/.profile"

XTERM_SET="-s -j -si -sk -sb -sl 10000"

XTERM_SET_DEF="$XTERM_SET -geometry 230x100"
XTERM_SET_DEL="$XTERM_SET -geometry 180x45"
XTERM_SET_FRE="$XTERM_SET -geometry 105x45"
XTERM_OPA_SET="$XTERM_SET -geometry 155x65"

CONV_DIR=CONV

EDDI_FILE=EDDIES

HM_SET=CARDS
FI_SET=CARDS.TEMPLATE

VelParStringPattern='.*VELPAR:.*'
VDHStringPattern='.*VDOP=   .*'
VDFStringPattern='.*VDOP=  .*'
JOBMAXStringPattern='.*JOBMAX=   .*'
NEWWRCStringPattern='.*NEWWRC=   .*'

ATM_MOD_DIR=$nessy_inp/atm/
DATOM_DIR=$nessy_inp/ato
ODF_TABLE_DIR=$nessy_inp/odf
FGRID_DIR=$nessy_inp/fgr
CARDS_DIR=$nessy_inp/car
VEL_FIELD_DIR=$nessy_inp/vel/

DATOM_FILE=datom.inp
ODF_TABLE_FILE=odf.table

#FILES_TO_IGNORE='CARDS atm.inp vel_field.in'
##############################################################################################################################

function compile
{
if [ $NEW_OBJ_FILES ]; then

    check_dir $nessy_obj

    rm -f $nessy_obj/*

fi

change_dir $nessy_src

if [ $NEW_DEPS ]; then

    message "Compiling the list of dependencies..."

    ./make/write_deps.sh *.for > ./make/Makefile.deps

fi

if [ $HM_RUN ]; then                         echo; cmd "make hminus"; echo; fi

if [ $F_RANGE ] || [ $FITE ]; then           echo; cmd "make fioss";  echo; fi

if [ $NODF ] || [ $LODF ] || [ $HMFI ]; then echo; cmd "make all";    echo; fi
}


function check_hm_dirs
{
check_dir $HM_GENERIC_DIR

HM_DIR=${HM_BASE_DIR}/IT$ODF_IT/

for RUN in $1; do

    if [ $ODF_IT -ne "0" ]; then

       check_dir $HM_DIR$RUN; check_dir $HM_DIR$RUN "e"

    else
 
       if [ ! -d $HM_DIR$RUN ] || [ ! -n "$(echo `ls $HM_DIR$RUN`)" ]; then

          create_dir $HM_DIR$RUN

          ln -s $HM_GENERIC_DIR/* $HM_DIR$RUN

          if [ ! $COMPILATION ]; then copy "$exes" "$HM_DIR$RUN"; echo; fi

          echo !!; echo

#       elif [ $CLEAN ]; then

#          check_dir $HM_DIR$RUN; check_dir $HM_DIR$RUN "e"

#          for FILE in $FILES_TO_IGNORE; do GLOBIGNORE=${GLOBIGNORE}:*$FILE; done

#          process_message "Cleaning $HM_DIR$RUN/" "rm -r $HM_DIR$RUN/*"

#          ln -s $HM_GENERIC_DIR/* $HM_DIR$RUN

#          if [ ! $COMPILATION ]; then copy $exes $HM_DIR$RUN; echo; fi

#          echo !!; echo; GLOBIGNORE=''

       fi

    fi

done
}

function check_f_dirs
{
FI_DIR=$FI_BASE_DIR/IT$ODF_IT/

for RUN in $1; do check_dir $FI_DIR$RUN; done; check_dir $ITX_DIR
}

function hm_xt_run
{
RUNS=$1; JOB=$2

HM_DIR=${HM_BASE_DIR}/IT$ODF_IT/

if [ "$JOB" == "$LTE_JOB" ]; then HM_LOG_NLTE=$HM_LOG; HM_LOG=$HM_LOG_LTE; fi

for RUN in $RUNS; do

 XTERM_CMD_FILE=$HM_DIR$RUN/$XTERM_CMD_FILE_NAME

 insert "$src_prof && cd $HM_DIR$RUN" "$XTERM_CMD_FILE" "r"

 if [ $CARDS ]; then check_file $CARDS_DIR/$CARDS; cp -v $CARDS_DIR/$CARDS $HM_DIR$RUN/$HM_SET; echo; fi

 IFS='%'
 if [ $NEWWRC ]; then xterm_cmd "sed -i 's/$NEWWRCStringPattern/$NEWWRCString/' $HM_SET"; fi
 if [ $VELPAR ]; then xterm_cmd "sed -i 's/$VelParStringPattern/$VelParString/' $HM_SET"; fi
 if [ $VDH ];    then xterm_cmd "sed -i 's/$VDHStringPattern/$VDHString/'       $HM_SET"; fi
 if [ $JOBMAX ]; then xterm_cmd "sed -i 's/$JOBMAXStringPattern/$JOBMAXString/' $HM_SET"; fi
 unset IFS

 if [ ! $OS_IT_NUM ]; then

    if [ ! $OLDSTART ]; then

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" == "OLDSTART" ] && [ "$ODF_IT" == "0" ]; then xterm_cmd "sed -i '$ d' $HM_SET"; fi

       xterm_cmd "rm -rf $HM_DIR$RUN/$CONV_DIR"

       xterm_cmd "rm -f  $HM_DIR$RUN/$EDDI_FILE"

       xterm_cmd "echo $JOB > $HM_DIR$RUN/$HM_JOB_FILE"

       xterm_cmd "./$HM_EXE_NAME | tee $HM_LOG"

    else

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ]; then xterm_cmd "echo OLDSTART >> $HM_SET"; fi

       xterm_cmd "echo | tee -a $HM_LOG; mv -v POPNUM OLDMODEL | tee -a $HM_LOG; echo | tee -a $HM_LOG"

       xterm_cmd "echo wrstart > $HM_DIR$RUN/$HM_JOB_FILE"

       xterm_cmd "./$HM_EXE_NAME | tee -a $HM_LOG"

    fi

    if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ] && [ "$ODF_IT" == "0" ]; then

       if [ $COMPILATION ] || [ $SRC ]; then

          rm -rf $HM_DIR$RUN/src/; mkdir -p $HM_DIR$RUN/src/; process_message "Copying ${nessy_src} -> $HM_DIR$RUN/src" "cp -r $nessy_src/*.for $HM_DIR$RUN/src/"

       fi

    fi

 else

    if [ ! $OLDSTART ]; then

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" == "OLDSTART" ]; then xterm_cmd "sed -i '$ d' $HM_SET"; fi

       xterm_cmd "rm -rf $HM_DIR$RUN/$CONV_DIR"

       xterm_cmd "rm -f  $HM_DIR$RUN/$EDDI_FILE"

    else

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ]; then xterm_cmd "echo OLDSTART >> $HM_SET"; fi

       xterm_cmd "mv -v POPNUM OLDMODEL | tee -a $HM_LOG; echo | tee -a $HM_LOG"

    fi

    if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ]; then

       if [ $COMPILATION ] || [ $SRC ]; then

          rm -rf $HM_DIR$RUN/src/; mkdir -p $HM_DIR$RUN/src/; process_message "Copying ${nessy_src} -> $HM_DIR$RUN/src" "cp -r $nessy_src/*.for $HM_DIR$RUN/src/"

       fi

    fi

    I=1

    while [ $I -le $OS_IT_NUM ]; do

          if [ $I -eq 1 ] && [ ! $OLDSTART ]; then xterm_cmd "echo -e 'RUN $I:\n' | tee $HM_LOG"; else xterm_cmd "echo -e 'RUN $I:\n' | tee -a $HM_LOG"; fi

                                                   xterm_cmd "echo wrstart > $HM_DIR$RUN/$HM_JOB_FILE"

          if [ $I -eq 2 ] && [ ! $OLDSTART ]; then xterm_cmd "echo OLDSTART >> $HM_SET"; fi

          if [ $I -gt 1 ];                    then xterm_cmd "mv -v POPNUM OLDMODEL | tee -a $HM_LOG"; fi

                                                   xterm_cmd "./$HM_EXE_NAME | tee -a $HM_LOG"

          I=$(echo $I+1 | bc)

    done

 fi

 if [ $APPEND_LTE_RUN ]; then

    xterm_cmd "echo $LTE_JOB > $HM_DIR$RUN/$HM_JOB_FILE"

    xterm_cmd "./$HM_EXE_NAME | tee $HM_LOG_LTE"

 fi

 if [ $ATM_MOD ];   then check_file $ATM_MOD_DIR$ATM_MOD;      cp -v $ATM_MOD_DIR$ATM_MOD      $HM_DIR$RUN/atm.inp;         echo; fi

 if [ $FGRID ];     then check_file $FGRID_DIR/$FGRID;         cp -v $FGRID_DIR/$FGRID         $HM_DIR$RUN/fgrid.inp;       echo; fi

 if [ $DATOM ];     then check_file $DATOM_DIR/$DATOM;         cp -v $DATOM_DIR/$DATOM         $HM_DIR$RUN/$DATOM_FILE;     echo; fi

 if [ $ODF_TABLE ]; then check_file $ODF_TABLE_DIR/$ODF_TABLE; cp -v $ODF_TABLE_DIR/$ODF_TABLE $HM_DIR$RUN/$ODF_TABLE_FILE; echo; fi

 if [ $VEL_FIELD ]; then check_file $VEL_FIELD_DIR$VEL_FIELD;  cp -v $VEL_FIELD_DIR$VEL_FIELD  $HM_DIR$RUN/vel_field.in;    echo; fi

 if [ $COMPILATION ] || [ $EXE_UPD ]; then copy $exes $HM_DIR$RUN; echo; fi

 xterm $XTERM_SET_DEF -title "IT$ODF_IT/$RUN (hminus@$(hostname))" -e "bash --rcfile $XTERM_CMD_FILE -i" &

done

if [ "$JOB" == "$LTE_JOB" ]; then HM_LOG=$HM_LOG_NLTE; fi
}


function hm_bg_run
{
RUNS=$1; JOB=$2

HM_DIR=$HM_BASE_DIR/IT$ODF_IT/

HM_HDD_DIR=$HM_BASE_HDD_DIR/IT0/

if [ "$JOB" == "$LTE_JOB" ]; then HM_LOG_NLTE=$HM_LOG; HM_LOG=$HM_LOG_LTE; fi

for RUN in $RUNS; do

 cd $HM_DIR$RUN

 if [ $CARDS ] && [ "$ODF_IT" == "0" ]; then check_file $CARDS_DIR/$CARDS; cp -v $CARDS_DIR/$CARDS $HM_DIR$RUN/$HM_SET; echo; fi

 IFS='%'
 if [ $NEWWRC ]; then sed -i "s/$NEWWRCStringPattern/$NEWWRCString/" $HM_SET; fi
 if [ $VELPAR ]; then sed -i "s/$VelParStringPattern/$VelParString/" $HM_SET; fi
 if [ $VDH ];    then sed -i "s/$VDHStringPattern/$VDHString/"       $HM_SET; fi
 if [ $JOBMAX ]; then sed -i "s/$JOBMAXStringPattern/$JOBMAXString/" $HM_SET; fi
 unset IFS

 if [ $ATM_MOD ]   && [ "$ODF_IT" == "0" ]; then check_file $ATM_MOD_DIR$ATM_MOD;      cp -v $ATM_MOD_DIR$ATM_MOD      $HM_DIR$RUN/atm.inp;         echo; fi

 if [ $FGRID ]     && [ "$ODF_IT" == "0" ]; then check_file $FGRID_DIR/$FGRID;         cp -v $FGRID_DIR/$FGRID         $HM_DIR$RUN/fgrid.inp;       echo; fi

 if [ $DATOM ]     && [ "$ODF_IT" == "0" ]; then check_file $DATOM_DIR/$DATOM;         cp -v $DATOM_DIR/$DATOM         $HM_DIR$RUN/$DATOM_FILE;     echo; fi

 if [ $ODF_TABLE ]; then

    check_file $ODF_TABLE_DIR/$ODF_TABLE

#    cp -v $HM_HDD_DIR$RUN/POPNUM $HM_DIR$RUN/POPNUM

    if [ "$ODF_IT" == "0" ]; then cp -v $ODF_TABLE_DIR/$ODF_TABLE $HM_DIR$RUN/$ODF_TABLE_FILE; fi
    if [ "$ODF_IT" == "1" ]; then cp    $ODF_TABLE_DIR/$ODF_TABLE $HM_DIR$RUN/$ODF_TABLE_FILE; fi

    echo

 fi

 if [ $VEL_FIELD ] && [ "$ODF_IT" == "0" ]; then check_file $VEL_FIELD_DIR$VEL_FIELD;  cp -v $VEL_FIELD_DIR$VEL_FIELD  $HM_DIR$RUN/vel_field.in;    echo; fi

 if [ $COMPILATION ] || [ $EXE_UPD ]; then

    if [ "$ODF_IT" == "0" ] || [ $HM_RUN ] || [ $HMFI ]; then copy "$exes" "$HM_DIR$RUN"; echo; fi

 fi

 if [ ! $OS_IT_NUM ]; then

    if [ ! $OLDSTART ]; then

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" == "OLDSTART" ] && [ "$ODF_IT" == "0" ]; then sed -i '$ d' $HM_SET; fi

       rm -rf $HM_DIR$RUN/$CONV_DIR

       rm -f  $HM_DIR$RUN/$EDDI_FILE

       echo $JOB > $HM_DIR$RUN/$HM_JOB_FILE

       ./$HM_EXE_NAME > $HM_LOG &

    else

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ]; then echo OLDSTART >> $HM_SET; fi

       mv POPNUM OLDMODEL

       echo wrstart > $HM_DIR$RUN/$HM_JOB_FILE

       ./$HM_EXE_NAME >> $HM_LOG &

    fi

    if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ] && [ "$ODF_IT" == "0" ]; then

       if [ $COMPILATION ] || [ $SRC ]; then

          rm -rf $HM_DIR$RUN/src/; mkdir -p $HM_DIR$RUN/src/; process_message "Copying ${nessy_src} -> $HM_DIR$RUN/src" "cp -r $nessy_src/*.for $HM_DIR$RUN/src/"

       fi

    fi

 else

    if [ ! $OLDSTART ]; then

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" == "OLDSTART" ]; then sed -i '$ d' $HM_SET; fi

       rm -rf $HM_DIR$RUN/$CONV_DIR

       rm -f  $HM_DIR$RUN/$EDDI_FILE

    else

       if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ]; then echo OLDSTART >> $HM_SET; fi

       mv POPNUM OLDMODEL

    fi

    if [ "$(tail -1 $HM_DIR$RUN/$HM_SET)" != "OLDSTART" ] || [ $HMFI ]; then

       if [ $COMPILATION ] || [ $SRC ]; then

          rm -rf $HM_DIR$RUN/src/; mkdir -p $HM_DIR$RUN/src/; process_message "Copying ${nessy_src} -> $HM_DIR$RUN/src" "cp -r $nessy_src/*.for $HM_DIR$RUN/src/"

       fi

    fi

    I=1

    while [ $I -le $OS_IT_NUM ]; do

          if [ $I -eq 1 ] && [ ! $OLDSTART ]; then echo -e RUN "$I":\n > $HM_LOG; else echo -e RUN "$I":\n >> $HM_LOG; fi

                                                   echo wrstart > $HM_DIR$RUN/$HM_JOB_FILE

          if [ $I -eq 2 ] && [ ! $OLDSTART ]; then echo OLDSTART >> $HM_SET; fi

          if [ $I -gt 1 ];                    then mv POPNUM OLDMODEL; fi

                                                   ./$HM_EXE_NAME >> $HM_LOG &

                                                   wait

          I=$(echo $I+1 | bc)

    done

 fi

 if [ $APPEND_LTE_RUN ]; then

    wait

    echo $LTE_JOB > $HM_DIR$RUN/$HM_JOB_FILE

    ./$HM_EXE_NAME > $HM_LOG_LTE &

 fi

done; wait

if [ "$JOB" == "$LTE_JOB" ]; then HM_LOG=$HM_LOG_NLTE; fi
}


function check_grid
{
NumberOfGridArguments=`echo "$1" | wc -w`

if [ "$NumberOfGridArguments" -lt 3 ]; then

   abort "$FUNCNAME: The number of arguments for the option -g|--radgr is lower than 3. \
          This number has to be grater than or equal to 3 and odd."

else

   Remnant=$(( $NumberOfGridArguments % 2 ))

   if [ $Remnant -ne 1 ]; then abort "$FUNCNAME: The number of arguments for the option -g|--radgr is not odd. \
                                      This number has to be odd and grater than or equal to 3."; fi

fi
}

function fi_test_run
{
FI_DIR=$FI_BASE_DIR/IT$ODF_IT/

RUN=$1

XTERM_CMD_FILE=$FI_DIR$RUN/$XTERM_CMD_FILE_NAME

job_dir=$FI_DIR$RUN/JOB-*

if [ $COMPILATION ] || [ $EXE_UPD ]; then cp -v $FI_EXE -t $job_dir; fi

insert "cd $job_dir; echo -e DIRECTORY: $job_dir'\n'" "$XTERM_CMD_FILE" "r"

xterm_cmd "./$FI_EXE_NAME | tee fioss_test.log; bash"

xterm $XTERM_SET_FRE -title "IT$ODF_IT/$RUN (fioss_test@$(hostname))" -e "bash --rcfile $XTERM_CMD_FILE -i" &
}

function fi_xt_run
{
FI_DIR=$FI_BASE_DIR/IT$ODF_IT/

RUNS=$1

RANGE=$2

GRID=$3

for RUN in $RUNS; do fioss_update; done

if [ "$RANGE" == "rad" ]; then

   for RUN in $RUNS; do

       XTERM_CMD_FILE=$FI_DIR$RUN/$XTERM_CMD_FILE_NAME

       insert "$src_prof && cd $FI_DIR$RUN; echo -e DIRECTORY: $FI_DIR$RUN'\n'" "$XTERM_CMD_FILE" "r"

       IFS='%'
       if [ $VDF ]; then xterm_cmd "sed -i 's/$VDFStringPattern/$VDFString/' $FI_SET"; fi
       unset IFS

       xterm_cmd "$RadioShellScriptName --grid='$GRID'"

       xterm $XTERM_SET_FRE -title "IT$ODF_IT/$RUN (fioss_rad@$(hostname))" -e "bash --rcfile $XTERM_CMD_FILE -i" &
 
   done

elif [ $RANGE == "uvi" ]; then

   export MAX_PROC=$MAX_PROC

   for RUN in $RUNS; do

       XTERM_CMD_FILE=$FI_DIR$RUN/$XTERM_CMD_FILE_NAME
 
       insert "$src_prof && cd $FI_DIR$RUN; echo -e DIRECTORY: $FI_DIR$RUN'\n'" "$XTERM_CMD_FILE" "r"

       IFS='%'
       if [ $VDF ]; then xterm_cmd "sed -i 's/$VDFStringPattern/$VDFString/' $FI_SET"; fi
       unset IFS

       xterm_cmd "echo -e MAX_PROC = $MAX_PROC'\n'"

       xterm_cmd "fioss_do2 $GRID"

       if [ "$RMLOPA" == "Yes" ]; then xterm_cmd "rm -rf $FI_DIR$RUN/lopa/"; fi
       if [ "$RMJOB" == "Yes" ];  then xterm_cmd "rm -rf $FI_DIR$RUN/JOB-*"; fi

       xterm $XTERM_SET_FRE -title "IT$ODF_IT/$RUN (fioss_uvi@$(hostname))" -e "bash --rcfile $XTERM_CMD_FILE -i" &
 
   done

else

   abort "$FUNCNAME: RANGE '$RANGE' is not recognized."

fi
}

function fi_bg_run
{
FI_DIR=$FI_BASE_DIR/IT$ODF_IT/

RUNS=$1

RANGE=$2

GRID=$3

for RUN in $RUNS; do if [ -z $LODF ] && [ -z $NODF ] && [ -z $HMFI ]; then fioss_update; fi; done

if [ "$RANGE" == "rad" ]; then

   for RUN in $RUNS; do

       cd $FI_DIR$RUN

       IFS='%'
       if [ $VDF ]; then sed -i "s/$VDFStringPattern/$VDFString/" $FI_SET; fi
       unset IFS

       echo -e DIRECTORY: $(pwd)'\n' > $FI_LOG_RAD

       $RadioShellScriptName --grid='$GRID' >> $FI_LOG_RAD &

   done; wait

elif [ "$RANGE" == "uvi" ]; then

   export MAX_PROC=$MAX_PROC

   for RUN in $RUNS; do
 
       cd $FI_DIR$RUN

       IFS='%'
       if [ $VDF ]; then sed -i "s/$VDFStringPattern/$VDFString/" $FI_SET; fi
       unset IFS

       echo -e DIRECTORY: $(pwd)'\n' > $FI_LOG_UVI

       echo -e MAX_PROC = $MAX_PROC'\n' >> $FI_LOG_UVI

       fioss_do2 $GRID >> $FI_LOG_UVI &

   done

   wait

   if [ "$RMLOPA" == "Yes" ]; then

      for RUN in $RUNS; do

          rm -rf $FI_DIR$RUN/lopa/ &

      done

   fi

   if [ "$RMJOB" == "Yes" ]; then

      for RUN in $RUNS; do

          rm -rf $FI_DIR$RUN/JOB-* &

      done

   fi

else

   abort "$FUNCNAME: RANGE '$RANGE' is not recognized."

fi
}

function fioss_update
{
if [ $SRC ];         then rm -rf $FI_DIR$RUN/src/; mkdir -p $FI_DIR$RUN/src/; cp $nessy_src/*.for $FI_DIR$RUN/src/; fi
if [ $EXE_UPD ];     then cp -v $FI_EXE -t $FI_DIR$RUN/; fi
if [ $COMPILATION ]; then

   rm -rf $FI_DIR$RUN/src/; mkdir -p $FI_DIR$RUN/src/; cp $nessy_src/*.for $FI_DIR$RUN/src/
   cp -v $FI_EXE -t $FI_DIR$RUN

fi
}

function prep_run_xt
{
HM_DIR=$HM_BASE_DIR/IT$ODF_IT/

if [ "$1" == "fioss" ];  then SCR=fioss_prepare;  BASE_DIR=$FI_BASE_DIR;                                   fi
if [ "$1" == "hminus" ]; then SCR=hminus_prepare; BASE_DIR=$HM_BASE_DIR; ODF_IT=$(echo $ODF_IT+1 | bc -l); fi

for RUN in $2; do

    XTERM_CMD_FILE=$HM_DIR$RUN/$XTERM_CMD_FILE_NAME

    insert "$src_prof && $SCR $ODF_IT $RUN" "$XTERM_CMD_FILE" "r"; xterm_cmd "cd ${BASE_DIR}IT$ODF_IT/$RUN"

    xterm $XTERM_SET_DEF -title "IT$ODF_IT/$RUN ($RUN_TO_PREP run preparation)" -e "bash --rcfile $XTERM_CMD_FILE -i" &

done
}

function prep_run_bg
{
if [ $1 == "fioss" ]; then

   BASE_DIR=$FI_BASE_DIR

   for RUN in $2; do

       fioss_prepare $ODF_IT $RUN > $HM_BASE_DIR/IT$ODF_IT/$RUN/$FIP_LOG &

   done; wait

fi

if [ $1 == "hminus" ]; then

   ODF_IT_M1=$ODF_IT; BASE_DIR=$HM_BASE_DIR; ODF_IT=$(echo $ODF_IT+1 | bc -l)

   for RUN in $2; do

       hminus_prepare $ODF_IT $RUN > $FI_BASE_DIR/IT$ODF_IT_M1/$RUN/$HMP_LOG &

   done; wait

fi
}

function del_run
{
for BRANCH in $1; do

    if [ "$BRANCH" != "fioss" ] && [ "$BRANCH" != "hminus" ]; then abort "$0: The name of the program for which the runs should be deleted is not understood."; fi

    if [ "$BRANCH" == "fioss" ];  then BASE_DIR=$FI_BASE_DIR; fi
    if [ "$BRANCH" == "hminus" ]; then BASE_DIR=$HM_BASE_DIR; fi

    XTERM_CMD_FILE=~/${XTERM_CMD_FILE_NAME}.$BRANCH
    LOG_FILE=~/.rm.log.$BRANCH

    rm -f $LOG_FILE
    rm -f $XTERM_CMD_FILE

    for RUN in $2; do

        for I in $3; do insert "rm -rvf ${BASE_DIR}/IT$I/$RUN | tee -a $LOG_FILE" "$XTERM_CMD_FILE" "a"; done

    done

    message "The following $BRANCH runs will be removed:"

    while read -r LINE; do DIR=$(echo $LINE | awk '{print $3}'); echo $DIR; done < "$XTERM_CMD_FILE"

    confirm

    xterm $XTERM_SET_DEL -title "Removing $BRANCH runs" -e "bash --rcfile $XTERM_CMD_FILE -i" &

done
}

function run_opac
{
FI_DIR=$FI_BASE_DIR/IT$ODF_IT

check_file $LBKG_CONTROL_FILE

RUNS=$1

NEXT_ODF_IT=$(echo $ODF_IT+1 | bc -l)

if [ "$MODE" == "xt" ]; then

   message "The ODFs will be calculated with the following settings:"; head -2 $LBKG_CONTROL_FILE; head -4 $LBKG_CONTROL_FILE | tail -1; echo

   read -t $TIME_BUFFER -p "Automatic start in $TIME_BUFFER seconds. Press Enter to proceed immediately or CTRL-C to abort."

fi

i=1

for RUN in $RUNS; do

    check_dir $FI_DIR/$RUN/; check_dir $FI_DIR/$RUN/lopa/

    RTB=$(shuf -i 130-200 -n 1)

    SSLC=`expr $(date +%s) - $(date +%s -r $LBKG_CONTROL_FILE)`

    while [ "$SSLC" -le "120" ]; do sleep $RTB; SSLC=`expr $(date +%s) - $(date +%s -r $LBKG_CONTROL_FILE)`; done

    DIM=$(wc -l $FI_DIR/$RUN/atm.inp | awk '{print $1}')

    DIM="DIM "$DIM

    sed -i "s/.*DIM.*/$DIM/" $LBKG_CONTROL_FILE

    num_times=$(echo $(wc -l $LBKG_CONTROL_FILE | awk '{print $1}') - 4 | bc)

#    sed -i '5,6d' $LBKG_CONTROL_FILE
    for k in $(seq 1 $num_times); do sed -i '5d' $LBKG_CONTROL_FILE; done

    INPUT_PATH="INPUT PATH "$FI_DIR/$RUN/lopa/; OUTPUT_PATH="OUTPUT PATH IT"${ODF_IT}_IT$NEXT_ODF_IT/$RUN/

    insert "$INPUT_PATH" "$LBKG_CONTROL_FILE" "a"; insert "$OUTPUT_PATH" "$LBKG_CONTROL_FILE" "a"

    LBKG_RUN=$LBKG_DIR/IT${ODF_IT}_IT$NEXT_ODF_IT/$RUN; rm -rf $LBKG_RUN; create_dir $LBKG_RUN

    if [ "$MODE" == "xt" ]; then

       echo -n "DIM for $RUN ODF run equals to "; tail -4 $LBKG_CONTROL_FILE | head -1 | awk '{print $2}'

       message "The following input and output paths will be used to calculate ODFs for $RUN run:"; tail -2 $LBKG_CONTROL_FILE; echo

       read -t $TIME_BUFFER -p "Automatic start in $TIME_BUFFER seconds. Press Enter to proceed immediately or CTRL-C to abort."; echo

       XTERM_CMD_FILE=$LBKG_RUN/.XTERM.cmd

       xterm_cmd "cd $LBKG_DIR"; xterm_cmd "opacity"; xterm_cmd "cd $LBKG_RUN"

       xterm $XTERM_OPA_SET -title "IT${ODF_IT}_IT$NEXT_ODF_IT/$RUN (opacity@$(hostname))" -e "bash --rcfile $XTERM_CMD_FILE -i" &

       if [ $i -ne $(echo $RUNS | wc -w) ]; then echo; read -t 3 -p "The ODF calculation for the next run will start in 3 seconds..."; fi

       if [ $i -eq $(echo $RUNS | wc -w) ]; then echo; fi

    elif [ "$MODE" == "bg" ]; then

       cd $LBKG_DIR; opacity > $LBKG_RUN/$ODF_LOG &

    else

       abort "$FUNCNAME: The MODE $MODE is not recognized."

    fi

    i=$(echo $i+1 | bc -l)

done; wait
}

function hmfi_run
{
hm_bg_run "$1" "$HM_JOB"

prep_run_bg "fioss" "$1"

#RMLOPA=Yes

fi_bg_run "$1" "uvi" "$UVI_GRID"
}

function lte_odf
{
hm_bg_run "$1" "lte"

prep_run_bg "fioss" "$1"

fi_bg_run "$1" "uvi" "1000 10 10000"
#fi_bg_run "$1" "uvi" "1000 100 10000"

run_opac "$1"

prep_run_bg "hminus" "$1"

hm_bg_run "$1" "wrstart"

prep_run_bg "fioss" "$1"

RMLOPA=Yes

fi_bg_run "$1" "uvi" "$UVI_GRID"
}

function nlte_odf
{
#===================================
#ODF 0

hm_bg_run "$1" "wrstart"

prep_run_bg "fioss" "$1"

fi_bg_run "$1" "uvi" "1000 10 10000"

run_opac "$1"

prep_run_bg "hminus" "$1"

#===================================
#ODF 1

hm_bg_run "$1" "wrstart"

prep_run_bg "fioss" "$1"

fi_bg_run "$1" "uvi" "1000 10 10000"

run_opac "$1"

prep_run_bg "hminus" "$1"

#===================================
#ODF 2

hm_bg_run "$1" "wrstart"

prep_run_bg "fioss" "$1"

fi_bg_run "$1" "uvi" "1000 10 10000"

run_opac "$1"

prep_run_bg "hminus" "$1"

#===================================
#ODF 3

hm_bg_run "$1" "wrstart"

prep_run_bg "fioss" "$1"

RMLOPA=Yes

fi_bg_run "$1" "uvi" "$UVI_GRID"
}

# Default values of options' arguments
##############################################################################################
#RAD_GRID="0.001 18 0.01 18 0.1 18 1.0 40 5.0 25 30.0 23 99.0"
#RAD_GRID="0.0007 15 0.001 18 0.01 18 0.1 18 1.0 40 5.0 25 30.0 23 99.0"
#RAD_GRID="0.0007 15 0.001 18 0.01 18 0.1 18 1.0 40 5.0 10 10 10 11 19 30.0 23 99.0"
RAD_GRID="0.001 18 0.01 38 0.2"
#RAD_GRID="0.09 2 0.1 18 1.0 40 5.0 25 30.0 23 99.0"
#RAD_GRID="0.1 18 1.0 40 5.0 25 30.0 23 99.0"

UVI_GRID="1000 10 10000"

HM_JOB=wrstart

ODF_IT=0

MODE="bg"

RMLOPA=No

MAX_PROC=1

branch=main
##############################################################################################

ParsedOptions=$(getopt --name "$0" --shell bash --alternative --options "ckdseoR:xnlrF:zP:HLp:D:i:OITtj:m:q:b:A:h:f:v:B:C:N:J:g:G:"\
                --longoptions "comp,nobj,ndep,src,exe,old,rep:,xterm,rmlopa,rmjob,fio:,co,mp:,hmi,LTE,prep:,del:,it:,lodf,nodf,hmfi,fite,job:,atm:,fgr:,car:,ato:,odf:,vfield:,vel:,VDH:,VDF:,NEWWRC:,JOBMAX:,radgr:,uvigr:" -- "$@")

if [ $? -ne 0 ]; then abort "$0: An invalid option has been provided."; else

   eval set -- "$ParsedOptions"

   while true; do

    case "$1" in

       -c|--comp)   COMPILATION=Yes;    shift;;

       -k|--nobj)   NEW_OBJ_FILES=Yes;  shift;;

       -d|--ndep)   NEW_DEPS=Yes;       shift;;

       -s|--src)    SRC=Yes;            shift;;

       -e|--exe)    EXE_UPD=Yes;        shift;;

       -o|--old)    OLDSTART=Yes;       shift;;

       -R|--rep)    OS_IT_NUM=$2;       shift 2;;

       -x|--xterm)  MODE="xt";          shift;;

#       -n|--clean)  CLEAN=Yes;          shift;;

       -l|--rmlopa) RMLOPA=Yes;         shift;;

       -r|--rmjob)  RMJOB=Yes;          shift;;

       -F|--fio)    F_RANGE=$2;         shift 2;;

       -z|--co)     CALC_ODF=Yes;       shift;;

       -P|--mp)     MAX_PROC=$2;        shift 2;;

       -H|--hmi)    HM_RUN=Yes;         shift;;

       -L|--LTE)    APPEND_LTE_RUN=Yes; shift;;

       -p|--prep)   PREP_RUN=Yes
                    RUN_TO_PREP=$2;     shift 2;;

       -D|--del)    DEL_RUN=Yes
                    RUN_TO_DEL=$2;      shift 2;;

       -i|--it)     ODF_IT=$2;          shift 2;;

       -O|--lodf)   LODF=Yes;           shift;;

       -I|--nodf)   NODF=Yes;           shift;;

       -T|--hmfi)   HMFI=Yes;           shift;;

       -t|--fite)   FITE=Yes;           shift;;

       -j|--job)    HM_JOB=$2;          shift 2;;

       -m|--atm)    ATM_MOD=$2;         shift 2;;

       -q|--fgr)    FGRID=$2;           shift 2;;

       -b|--car)    CARDS=$2;           shift 2;;

       -A|--ato)    DATOM=$2;           shift 2;;

       -h|--odf)    ODF_TABLE=$2;       shift 2;;

       -f|--vfield) VEL_FIELD=$2;       shift 2;;

       -v|--vel)    VELPAR=($2)
                    VFINAL=${VELPAR[0]}
                    VMIN=${VELPAR[1]};  shift 2;;

       -B|--VDH)    VDH=$2;             shift 2;;

       -C|--VDF)    VDF=$2;             shift 2;;

       -N|--NEWWRC) NEWWRC=$2;          shift 2;;

       -J|--JOBMAX) JOBMAX=$2;          shift 2;;

       -g|--radgr)  RAD_GRID=$2;        shift 2;;

       -G|--uvigr)  UVI_GRID=$2;        shift 2;;

       --)                              shift;    break;;

    esac

   done

   if [ -z "$1" ]; then abort "$0: The list of runs has to be provided."; fi

   if [ $COMPILATION ]; then compile; fi

   if [ $F_RANGE ]; then

      check_f_dirs "$1"

      if [ "$F_RANGE" == "rad" ]; then

         check_grid "$RAD_GRID"

         if   [ "$MODE" == "bg" ]; then fi_bg_run "$1" "rad" "$RAD_GRID"
         elif [ "$MODE" == "xt" ]; then fi_xt_run "$1" "rad" "$RAD_GRID"
         else abort "$0: The MODE '$MODE' is not recognized."; fi

      elif [ "$F_RANGE" == "uvi" ]; then

         if   [ "$MODE" == "bg" ]; then fi_bg_run "$1" "uvi" "$UVI_GRID"
         elif [ "$MODE" == "xt" ]; then fi_xt_run "$1" "uvi" "$UVI_GRID"
         else abort "$0: The MODE '$MODE' is not recognized."; fi

      else

         abort "$0: The F_RANGE '$F_RANGE' is not recognized."

      fi

   fi

# Variables for $HM_SET file adjustment
##############################################################################################
   VelParString='VELPAR: VFINAL (KM\/S)='$VFINAL'VMIN='$VMIN'BETA= 1. RMAX= 1.01 X'
   VDHString='VDOP='"   "$VDH
   JOBMAXString='JOBMAX='"   "$JOBMAX
   NEWWRCString='NEWWRC='"   "$NEWWRC
##############################################################################################
# Variables for $FI_SET file adjustment
##############################################################################################
   VDFString='VDOP='"  "$VDF
##############################################################################################

   if [ $HM_RUN ]; then

      exes=$HM_EXE

      check_hm_dirs "$1"

      if [ "$MODE" == "bg" ]; then hm_bg_run "$1" "$HM_JOB"; elif [ "$MODE" == "xt" ]; then hm_xt_run "$1" "$HM_JOB"; else abort "$0: The MODE '$MODE' is not recognized."; fi

   fi

   if [ $PREP_RUN ]; then

      if [ -z $RUN_TO_PREP ]; then abort "$0: You have to specify the program the runs of which you wish to prepare (fioss or hminus)."; fi

      if [ $RUN_TO_PREP != "fioss" ] && [ $RUN_TO_PREP != "hminus" ]; then abort "$0: The name of the program for which the runs should be prepared is not understood."; fi

      if [ "$MODE" == "bg" ]; then prep_run_bg $RUN_TO_PREP "$1"; elif [ "$MODE" == "xt" ]; then prep_run_xt $RUN_TO_PREP "$1"; else abort "$0: The MODE '$MODE' is not recognized."; fi

   fi

   if [ $DEL_RUN ]; then

      if [ -z "$ODF_IT" ]; then abort "$0: You have to specify the ODF iterations to be removed"; fi

      if [ -z "$RUN_TO_DEL" ]; then abort "$0: You have to specify the program the runs of which you wish to delete (fioss or hminus)."; fi

      del_run "$RUN_TO_DEL" "$1" "$ODF_IT"

   fi

   if [ $CALC_ODF ]; then check_f_dirs "$1"; run_opac "$1"; fi

   if [ $LODF ] || [ $NODF ] || [ $HMFI ]; then

      exes=$HM_EXE' '$FI_EXE

      check_hm_dirs "$1"

      if [ $LODF ]; then lte_odf  "$1"; fi

      if [ $NODF ]; then nlte_odf "$1"; fi

      if [ $HMFI ]; then hmfi_run "$1"; fi

   fi

   if [ $FITE ]; then fi_test_run "$1"; fi

fi
