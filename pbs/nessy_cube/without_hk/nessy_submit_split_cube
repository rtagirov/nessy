#!/bin/bash

if [ $# != 8 ]; then
 
   echo expecting 8 arguments: stype, ctype, csnap, reverse_cube_frac, rname, rmode, rangl, spath
 
   exit 1
 
fi

declare -i reverse_cube_frac

stype=$1 # spectral type
ctype=$2 # cube type
csnap=$3 # cube snapshot id
reverse_cube_frac=$4 # reverse of the fraction of the cube to be calculated
rname=$5 # run name
rmode=$6 # lte or nlte
rangl=$7 # run angle (index of the cube inclination)
spath=$8 # path to cube slices

if [ $rmode != lte ] && [ $rmode != nlte ]; then

    echo "rmode is not recognized. abort."

    exit 1

fi

declare -i Nt Ng Ns Nr
#declare -i gs ge
declare -i sub

#Nt - total number of rays
#Ns - number of submissions
#Ng - number of groups in each submission
#Nr - number of rays in each group

Nt=512*512

#full cube, Nr rays per core
Ns=${N_sub:-1}
Ng=8192
Nr=Nt/Ng/Ns/reverse_cube_frac

#---------------------------------------------------------

#quarter of the cube, 1 ray per core, 16 submissions
#Ng=4096
#Ns=16
#Nr=1

#---------------------------------------------------------

#quarter of the cube, 1 ray per core, 32 submissions
#Ng=2048
#Ns=32
#Nr=1

#---------------------------------------------------------

#eighth of the cube, 1 ray per core, 4 submissions
#Ng=8192
#Ns=4
#Nr=1

#---------------------------------------------------------

#eighth of the cube, 4 ray per core, 1 submissions
#Ng=8192
#Ns=1
#Nr=4

#---------------------------------------------------------

#eighth of the cube, 2 ray per core, 2 submissions
#Ng=8192
#Ns=2
#Nr=2

#---------------------------------------------------------

#1/32 of the cube, 1 ray per core, 1 submissions
#Ng=8192
#Ns=1
#Nr=1

#---------------------------------------------------------

walltime=24:00:00

ws=1800
we=2990

#---------------------------------------------------------

#test
Ns=2
Ng=2
Nr=2

#walltime=00:31:00

ws=1800
we=1800
#we=2990

#---------------------------------------------------------

if [ $HOME == /rds/general/user/rtagirov/home ]; then

    host=imperial

elif [ $HOME == /home/dc-tagi1 ]; then

    host=dirac_cambridge

else

    echo "Host not recognized. Abort."

    exit 1

fi

if [ $host == imperial ]; then

    rds=/rds/general/user/rtagirov/ephemeral

    base=$rds/runs/nessy

#    atm=$HOME/cubes/matthias/$ctype/$csnap/$spath
    atm=$rds/cubes/veronika/$stype/$ctype/$csnap/$spath

#    run=veronika/$stype/$ctype/$csnap/$reverse_cube_frac/$rname/$rmode/$rangl
#    run=veronika/$stype/$ctype/$csnap/$rmode/$rangl
#    run=veronika/$stype/$ctype/$csnap/$reverse_cube_frac/$rmode/$rangl
    run=$stype/$ctype/$csnap/$reverse_cube_frac/$rmode/$rangl

    scr=$HOME/nessy/scr
    obj=$HOME/nessy/obj
    inp=$HOME/nessy/inp

elif [ $host == dirac_cambridge ]; then

    rds=/home/dc-tagi1/rds/rds-dirac-dp100-n0fcCTMMDq4/dc-tagi1

#    base=$rds/runs/nessy
    base=$rds/runs

#    atm=$rds/cubes/matthias/$ctype/$csnap/$spath
    atm=$rds/cubes/veronika/$stype/$ctype/$csnap/$spath

#    run=veronika/$stype/$ctype/$csnap/$reverse_cube_frac/$rname/$rmode/$rangl
#    run=veronika/$stype/$ctype/$csnap/$rangl
    run=test_run/$stype/$ctype/$csnap/$rangl

#    scr=$HOME/nessy/scr
#    obj=$HOME/nessy/obj
#    inp=$HOME/nessy/inp

    scr=$rds/nessy/scr
    obj=$rds/nessy/obj
    inp=$rds/nessy/inp

fi

#run=veronika/$stype/$ctype/$csnap/$rmode/$rangl

#run=$stype/matthias/$ctype/$csnap/$reverse_cube_frac/$rname/$rmode/$rangl
#run=veronika/$stype/$ctype/$csnap/$reverse_cube_frac/$rname/$rmode/$rangl

ldo=$rds/logs/nessy/$run/out
lde=$rds/logs/nessy/$run/err

slog=$base/$run/success.log
flog=$base/$run/fail.log
spec=$base/$run/spec

mkdir -p $base/$run $ldo $lde

if [ -d $base/$run/inp ]; then rm -r $base/$run/inp; fi

mkdir -p $base/$run/inp

echo Submitting $run:

echo Copying input files...

cp $inp/gen/CARDS.TEMPLATE $base/$run/inp
cp $inp/gen/cards.inp      $base/$run/inp
cp $inp/gen/datom.inp      $base/$run/inp
cp $inp/gen/fgrid.inp      $base/$run/inp
cp $inp/gen/chem.inp       $base/$run/inp
cp $inp/gen/fudge.inp      $base/$run/inp
cp $inp/gen/sun.inp        $base/$run/inp

ln -s $inp/gen/fort.19.d      $base/$run/inp
ln -s $inp/gen/odf.inp        $base/$run/inp
ln -s $inp/gen/fort           $base/$run/inp
ln -s $inp/gen/crs            $base/$run/inp
ln -s $inp/gen/mol            $base/$run/inp

echo Removing old spectra...

rm -rf   $spec
mkdir -p $spec

echo Removing old logs...

rm -f $slog
rm -f $flog
rm -f $ldo/*
rm -f $lde/*

echo "Reverse of the fraction of the cube: $reverse_cube_frac" >  $base/$run/split.log
echo "Number of submissions:               $Ns"                >> $base/$run/split.log
echo "Number of groups in each submission: $Ng"                >> $base/$run/split.log
echo "Number of rays in each group:        $Nr"                >> $base/$run/split.log

cp $obj/hminus.exe       $base/$run
cp $obj/fioss.exe        $base/$run

cp $scr/fioss_cplink_dir $base/$run
cp $scr/fioss_mv_results $base/$run
cp $scr/fioss_do2        $base/$run

for ((sub=1; sub<=Ns; sub+=1)); do

#IFS='/' read -r -a array <<< "$run"

if [ $host == imperial ]; then

#gs=1
#ge=Ng

#gs=(sub-1)*Ng+1
#ge=sub*Ng

#name=n:${ctype:0:1}/$reverse_cube_frac/$rname/${rmode:0:1}/$rangl:$sub
name=n:${ctype:0:1}/$reverse_cube_frac/${rmode:0:1}/$rangl:$sub

qsub -v \
host=$host,\
rmode=$rmode,\
base=$base,\
run=$run,\
atm=$atm,\
slog=$slog,\
flog=$flog,\
spec=$spec,\
reverse_cube_frac=$reverse_cube_frac,\
Ns=$Ns,\
Ng=$Ng,\
Nr=$Nr,\
sub=$sub,\
ws=$ws,\
we=$we \
-J 1-$Ng:1 \
-o $ldo \
-e $lde \
-N $name \
-lwalltime=$walltime \
-lselect=1:ncpus=1:mem=2gb:avx2=true nessy_calc_ray_spec

elif [ $host == dirac_cambridge ]; then

#gs=1
#ge=Ng

#name=n:${ctype:0:1}/$reverse_cube_frac/$rname/${rmode:0:1}/$rangl:$sub
#name=${ctype:0:1}/${rmode:0:1}/$rangl:$sub
name=${ctype:0:1}/$rangl:$sub

sbatch \
-A dirac-dp100-cpu \
-p skylake \
--export=host=$host,\
rmode=$rmode,\
base=$base,\
run=$run,\
atm=$atm,\
slog=$slog,\
flog=$flog,\
spec=$spec,\
reverse_cube_frac=$reverse_cube_frac,\
Ns=$Ns,\
Ng=$Ng,\
Nr=$Nr,\
sub=$sub,\
ws=$ws,\
we=$we \
-a 1-$Ng:1 \
-o $ldo/%A[%a] \
-e $lde/%A[%a] \
-J $name \
-t $walltime \
-n 1 -c 1 --mem 2gb nessy_calc_ray_spec

fi

done
