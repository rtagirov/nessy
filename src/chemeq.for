
      Module MOD_chemeq
      integer, parameter :: Nmol=7
       

!      real*8 COEFF(6,7)
! C2
!      DATA COEFF/-1.02806624D+01, -5.8824525D+00, 4.53113208D+00,
!     * -8.81272374D-01, 7.31532529D-02, -2.20582713D-03,
! CH 
!     * -6.39088084D+02,  4.15348289D+02,-1.07347497D+02,  1.38641430D+01,                          
!     * -8.93708447D-01,  2.30541115D-02,
! CN    
!     *  7.47785319D+02, -4.99002008D+02, 1.33414942D+02, -1.77506027D+01,                           
!     * 1.17597369D+00, -3.09635090D-02,
! CO     
!     * -1.62048015D+02, 1.05132446D+02, -2.65130085D+01, 3.32031585D+00,
!     * -2.04846876D-01, 5.01413920D-03,
! H2
!     * -4.53905690D+02, 2.82318051D+02, -7.03090338D+01, 8.76829786D+00,
!     * -5.46808203D-01, 1.36875642D-02,
! NH    
!     * -1.30807182D+02, 8.49695234D+01, -2.17821119D+01, 2.82050907D+00,
!     * -1.83582274D-01, 4.85819087D-03,
! OH    
!     * -4.29677284D+02, 2.69725422D+02, -6.71931577D+01, 8.36764870D+00,
!     * -5.19996974D-01, 1.29462317D-02/





       real*8, parameter :: eVtocm=8065.5447





!******************************Sauval&Tatum**************************
  
      real*8 COEFF(6,8)
! C2                                                                 
                                                                                          
      DATA COEFF/4.3091, -2.2406, 0.4865,
     * -0.2049, 0., 0.,
! CH 
     * 3.3586,  -2.0656, 0.9624, -0.2239, 
     * 0.,  0.,
! CN 
     *  4.0078, -2.1514, 0.9226, -0.1671,
     * 0., 0.,
! CO 
     *  3.6076, -1.7608, 0.4172, 0.,
     *  0., 0.,
! H2
     *  1.6498, -1.6265, 0.7472, -0.2751,
     * 0., 0.,
! NH 
     * 3.0735, -1.8501, 0.9607, -0.3935,
     * 0., 0.,
! OH
     * 3.0929, -1.6778, 0.6743, -0.1874,
     * 0., 0.,
! O2 
     * 4.0636, -2.0779, 0.7660, -0.2111,
     * 0., 0./
!******************************Sauval&Tatum**************************


      TYPE :: Lines
      real*8, allocatable::Etran(:), Aabs(:), Elow(:), Jlow(:), Jup(:),
     *  Tup(:)
      END TYPE Lines

      TYPE(Lines) :: Mollines(Nmol)


       integer Nlines(Nmol)

       integer imin(Nmol), imax(Nmol)
       


       real*8, allocatable::alpha0(:,:)

       real*8, allocatable::molconc(:,:)

       real*8, allocatable::vturbmol(:,:)

!      real*8, allocatable::EtranCN(:), AabsCN(:), ElowCN(:), JlowCN(:), JupCN(:), TupCN(:)
!      real*8, allocatable::EtranCH(:), AabsCH(:), ElowCH(:), JlowCH(:), JupCH(:), TupCH(:)  
!      real*8, allocatable::concCN(:), concCH(:)
!      integer  NlinesCN, NlinesCH

      contains
    

      SUBROUTINE readmollines
      IMPLICIT NONE 
      INCLUDE '../inc/PARAMS.FOR'
      INCLUDE '../inc/MODELP.FOR'
      integer i, j, nunit1
      integer ni
 !    integer ND  

      integer mn, maxlines

      real*8, PARAMETER::DP1=1.651E8

      CHARACTER(LEN=2) Molnames(Nmol)      

      real*8 MOLMASS(Nmol)
      DATA Molnames/'c2', 'ch', 'cn', 'co', 'h2', 'nh', 'oh'/
      DATA MOLMASS/24.0216,13.0187,26.0175,28.0102,
     *             2.0159,15.0147,17.0074/

!      DATA Molnames/'c2', 'ch', 'cn', 'co', 'h2', 'nh', 'oh', 'o2'/
!      DATA MOLMASS/24.0216,13.0187,26.0175,28.0102,
!     *             2.0159,15.0147,17.0074, 16./


         do i=1, Nmol 

      nunit1=100

!      open(nunit1, file='~/Kurucz/ASC/CONVERTED/Molec/'//Molnames(i)//'.asc', status='unknown')

      open(nunit1, file='./mol/'//Molnames(i)//'.asc', status='unknown',
     *  ACTION='READ')     


      read(nunit1,*) Nlines(i)
      print*, 'reading', Molnames(i)
 
      allocate(Mollines(i)%Etran(Nlines(i)))
      allocate(Mollines(i)%Aabs(Nlines(i)))
      allocate(Mollines(i)%Elow(Nlines(i)))  
      allocate(Mollines(i)%Jlow(Nlines(i)))
      allocate(Mollines(i)%Jup(Nlines(i)))
      allocate(Mollines(i)%Tup(Nlines(i)))



      do j=1, Nlines(i)
      read(nunit1, *) Mollines(i)%Etran(j), Mollines(i)%Aabs(j), Mollines(i)%Elow(j), 
     $ Mollines(i)%Jlow(j), Mollines(i)%Jup(j), Mollines(i)%Tup(j) 
      enddo


      close(nunit1)

         enddo

      maxlines=maxval(Nlines(1:Nmol))

      allocate(alpha0(Nmol,maxlines))

      allocate(vturbmol(Nmol,ND))

      
      do i=1, Nmol
        
           do ni=1, ND

           vturbmol(i,ni)=sqrt(VTURB(ni) + DP1*TEMP(ni)/MOLMASS(i)) 
 

           enddo

      enddo



      


      END SUBROUTINE





      SUBROUTINE dissOH(ID, freq, NFREQ, TK, OHcont)
      use constants
      IMPLICIT NONE 
      
      integer, parameter :: NT=9
      integer, parameter :: NE=111


      integer i, ID, NFREQ, ilowT, iupT, ilowE, iupE
      real*8 freq(NFREQ),  OHcont(NFREQ)
      real*8 TK, Tlow, Tup, Elow, Eup
      real*8 alowT, aupT, alowE, aupE, lambdam, enevm
      real*8 sect_ll,  sect_lu, sect_ul, sect_uu, sect
      real*8 Tdiss(NT)
      real*8 contOH(NE,NT+1)
     
!        from Kurucz et al 1987
!        OH photodissaciation

     

        
         

         lambdam=(clight_cgs/freq(1)+clight_cgs/freq(NFREQ))/2. ! lambda in cm
         enevm=1./(eVtocm*lambdam)

         
 

         if ((TK .ge. 9000.) .or. (TK .le. 1000.) .or. (enevm .lt. 2.)
     *  .or. (enevm .gt. 15.)) then
         OHcont(:)=0.
         
         else

         contOH(1,:)=[2.0,  0.00D-00, 5.66D-32, 4.29D-29, 1.10D-27, 7.35D-27, 
     *   2.52D-26, 5.92D-26, 1.10D-25, 1.76D-25]
         contOH(2,:)=[2.2, 0.00D-00, 3.20D-31, 2.43D-28, 6.23D-27, 4.16D-26,
     *   1.42D-25, 3.35D-25, 6.23D-25, 9.95D-25]
         contOH(3,:)=[2.4, 0.00D-00, 1.42D-30, 1.06D-27, 2.72D-26, 1.81D-25, 
     *   6.21D-25, 1.46D-24, 2.71D-24, 4.33D-24]
         contOH(4,:)=[2.6, 0.00D-00, 4.93D-30, 3.67D-27, 9.36D-26, 6.23D-25,
     *   2.13D-24, 5.01D-24, 9.32D-24, 1.49D-23]
         contOH(5,:)=[2.8, 1.63D-36, 1.51D-29, 1.05D-26, 2.66D-25, 1.77D-24,
     *   6.05D-24,1.42D-23,2.64D-23, 4.21D-23]
         contOH(6,:)=[3.0,3.24D-35,5.30D-29, 2.67D-26,6.51D-25,4.28D-24,
     *   1.46D-23,3.41D-23,6.34D-23,1.01D-22]
         contOH(7,:)=[3.2, 2.25D-34, 2.01D-28, 6.25D-26, 1.41D-24, 9.05D-24,
     *   3.05D-23, 7.11D-23, 1.32D-22, 2.09D-22]
         contOH(8,:)=[3.4, 1.20D-33, 7.95D-28, 1.48D-25, 2.86D-24, 1.75D-23,
     *   5.79D-23, 1.33D-22, 2.45D-22, 3.88D-22]
         contOH(9,:)=[3.6, 5.71D-33, 2.94D-27, 3.71D-25, 5.78D-24, 3.25D-23,
     *   1.03D-22, 2.33D-22, 4.23D-22, 6.64D-22]
         contOH(10,:)=[3.8, 9.83D-31, 1.13D-26, 9.61D-25, 1.19D-23, 5.98D-23,
     *   1.79D-22, 3.89D-22, 6.92D-22, 1.07D-21]
         contOH(11,:)=[4.0, 8.08D-30,	4.25D-26, 2.49D-24, 2.54D-23, 
     *   1.12D-22,3.11D-22,  6.45D-22, 1.11D-21, 1.68D-21]
         contOH(12,:)=[4.2, 5.06D-29,	1.66D-25, 6.47D-24, 5.48D-23,
     *  2.15D-22, 5.51D-22, 1.08D-21, 1.80D-21, 2.64D-21]
         contOH(13,:)=[4.4, 4.98D-28,	6.56D-25, 1.68D-23, 1.18D-22,
     *  4.16D-22, 9.89D-22, 1.85D-21, 2.94D-21, 4.21D-21]
         contOH(14,:)=[4.6, 1.31D-26,	2.90D-24, 4.57D-23, 2.56D-22,
     *  8.02D-22, 1.77D-21, 3.15D-21, 4.84D-21, 6.73D-21]
         contOH(15,:)=[4.8, 8.98D-26,	1.16D-23, 1.26D-22, 5.62D-22,
     *  1.55D-21, 3.16D-21, 5.33D-21, 7.90D-21, 1.07D-20]
         contOH(16,:)=[5.0, 6.48D-25,	4.60D-23, 3.54D-22, 1.26D-21,
     *  3.02D-21, 5.66D-21, 9.00D-21, 1.28D-20, 1.68D-20]
         contOH(17,:)=[5.2, 3.62D-24,	1.71D-22, 9.74D-22, 2.86D-21,
     *  5.98D-21, 1.02D-20, 1.53D-20, 2.07D-20, 2.64D-20]
         contOH(18,:)=[5.4, 1.88D-23,	5.85D-22, 2.60D-21, 6.42D-21,
     *  1.19D-20, 1.86D-20, 2.60D-20, 3.37D-20, 4.13D-20]
         contOH(19,:)=[5.6, 8.48D-23,	1.81D-21, 6.58D-21, 1.40D-20,
     *  2.33D-20, 3.36D-20, 4.43D-20, 5.48D-20, 6.48D-20]
         contOH(20,:)=[5.8, 3.53D-22,	5.05D-21, 1.56D-20, 2.93D-20,
     *  4.45D-20, 5.98D-20, 7.46D-20, 8.84D-20, 1.01D-19]
         contOH(21,:)=[6.0, 1.32D-21,	1.28D-20, 3.41D-20, 5.81D-20,
     *  8.15D-20, 1.03D-19, 1.23D-19, 1.40D-19, 1.55D-19]
         contOH(22,:)=[6.1, 2.50D-21,	1.97D-20, 4.91D-20, 7.98D-20,
     *  1.08D-19, 1.33D-19, 1.55D-19, 1.74D-19, 1.90D-19]
         contOH(23,:)=[6.2, 4.66D-21,	2.97D-20, 6.91D-20, 1.08D-19,
     *  1.41D-19, 1.70D-19, 1.93D-19, 2.14D-19, 2.31D-19]
         contOH(24,:)=[6.3, 8.53D-21,	4.40D-20, 9.52D-20, 1.42D-19,
     *  1.81D-19, 2.12D-19, 2.38D-19, 2.59D-19, 2.77D-19]
         contOH(25,:)=[6.4, 1.54D-20,	6.38D-20, 1.28D-19, 1.84D-19, 
     *  2.27D-19, 2.61D-19, 2.88D-19, 3.10D-19, 3.27D-19]
         contOH(26,:)=[6.5, 2.72D-20,	9.09D-20, 1.69D-19, 2.32D-19,
     *  2.80D-19, 3.16D-19, 3.43D-19, 3.64D-19, 3.81D-19]
         contOH(27,:)=[6.6, 4.74D-20,	1.28D-19, 2.18D-19, 2.87D-19,
     *  3.37D-19, 3.73D-19, 4.00D-19, 4.21D-19, 4.37D-19]
         contOH(28,:)=[6.7, 8.12D-20,	1.77D-19, 2.76D-19, 3.48D-19,
     *  3.98D-19, 4.33D-19, 4.59D-19, 4.79D-19, 4.94D-19]
         contOH(29,:)=[6.8, 1.36D-19,	2.45D-19, 3.47D-19, 4.16D-19,
     *  4.63D-19, 4.96D-19, 5.20D-19, 5.39D-19, 5.53D-19]
         contOH(30,:)=[6.9, 2.23D-19,	3.38D-19, 4.34D-19, 4.97D-19,
     *  5.38D-19, 5.67D-19, 5.88D-19, 6.04D-19, 6.17D-19]
         contOH(31,:)=[7.0, 3.56D-19,	4.68D-19, 5.49D-19, 5.98D-19,  
     *  6.30D-19, 6.53D-19, 6.70D-19, 6.83D-19, 6.94D-19]
         contOH(32,:)=[7.1, 5.48D-19,	6.46D-19, 7.02D-19, 7.32D-19,
     *  7.51D-19, 7.66D-19, 7.78D-19, 7.87D-19, 7.95D-19]
         contOH(33,:)=[7.2, 8.10D-19,	8.82D-19, 9.05D-19, 9.11D-19, 
     *  9.15D-19, 9.19D-19, 9.23D-19, 9.26D-19, 9.28D-19]
         contOH(34,:)=[7.3, 1.14D-18,	1.18D-18, 1.16D-18, 1.14D-18, 
     *   1.13D-18, 1.12D-18, 1.11D-18, 1.10D-18, 1.10D-18]
         contOH(35,:)=[7.4, 1.53D-18,	1.52D-18, 1.46D-18, 1.41D-18, 
     *  1.38D-18, 1.35D-18, 1.33D-18, 1.32D-18, 1.30D-18]
         contOH(36,:)=[7.5, 1.94D-18,	1.89D-18, 1.79D-18, 1.71D-18,
     *  1.65D-18, 1.61D-18, 1.57D-18, 1.54D-18, 1.52D-18]
         contOH(37,:)=[7.6, 2.34D-18,	2.23D-18, 2.10D-18, 1.99D-18,
     *  1.92D-18, 1.85D-18, 1.80D-18, 1.76D-18, 1.72D-18]
         contOH(38,:)=[7.7, 2.65D-18,	2.51D-18, 2.35D-18, 2.22D-18,
     *  2.13D-18, 2.05D-18, 1.99D-18, 1.93D-18, 1.88D-18]
         contOH(39,:)=[7.8, 2.85D-18,	2.68D-18, 2.50D-18, 2.37D-18,
     *  2.26D-18, 2.18D-18, 2.10D-18, 2.04D-18, 1.98D-18]
         contOH(40,:)=[7.9, 2.91D-18,	2.72D-18, 2.54D-18, 2.41D-18, 
     *  2.30D-18, 2.21D-18, 2.13D-18, 2.06D-18, 2.00D-18]
         contOH(41,:)=[8.0, 2.82D-18,	2.63D-18, 2.47D-18, 2.34D-18, 
     *  2.24D-18, 2.15D-18, 2.08D-18, 2.01D-18, 1.95D-18]
         contOH(42,:)=[8.1, 2.60D-18,	2.44D-18, 2.30D-18, 2.19D-18, 
     *  2.10D-18, 2.02D-18, 1.96D-18, 1.89D-18, 1.83D-18]
         contOH(43,:)=[8.2, 2.31D-18,	2.17D-18, 2.06D-18, 1.98D-18, 
     *  1.91D-18, 1.85D-18, 1.79D-18, 1.73D-18, 1.68D-18]
         contOH(44,:)=[8.3, 1.98D-18,	1.87D-18, 1.80D-18, 1.74D-18, 
     *  1.69D-18, 1.64D-18, 1.60D-18, 1.55D-18, 1.51D-18]
         contOH(45,:)=[8.4, 1.64D-18,	1.58D-18, 1.54D-18, 1.50D-18, 
     *  1.47D-18, 1.44D-18, 1.41D-18, 1.38D-18, 1.35D-18]
         contOH(46,:)=[8.5, 1.34D-18,	1.31D-18, 1.30D-18, 1.28D-18, 
     *  1.27D-18, 1.25D-18, 1.23D-18, 1.22D-18, 1.20D-18]
         contOH(47,:)=[8.6, 1.09D-18,	1.08D-18, 1.09D-18, 1.10D-18, 
     *  1.10D-18, 1.10D-18, 1.09D-18, 1.08D-18, 1.07D-18]
         contOH(48,:)=[8.7, 9.03D-19,	9.12D-19, 9.39D-19, 9.58D-19, 
     *  9.70D-19, 9.76D-19, 9.79D-19, 9.80D-19, 9.78D-19]
         contOH(49,:)=[8.8, 7.82D-19,	8.01D-19, 8.35D-19, 8.62D-19, 
     *  8.82D-19, 8.96D-19, 9.07D-19, 9.15D-19, 9.20D-19]
         contOH(50,:)=[8.9, 7.27D-19,	7.50D-19, 7.85D-19, 8.15D-19, 
     *  8.40D-19, 8.61D-19, 8.77D-19, 8.90D-19, 9.00D-19]
         contOH(51,:)=[9.0, 7.37D-19,	7.58D-19, 7.89D-19, 8.19D-19, 
     *  8.47D-19, 8.71D-19, 8.91D-19, 9.07D-19, 9.20D-19]
         contOH(52,:)=[9.1, 8.11D-19,	8.25D-19, 8.49D-19, 8.77D-19, 
     *  9.04D-19, 9.30D-19, 9.52D-19, 9.69D-19, 9.83D-19]
         contOH(53,:)=[9.2, 9.38D-19,	9.44D-19, 9.61D-19, 9.86D-19, 
     *  1.01D-18, 1.04D-18, 1.06D-18, 1.08D-18, 1.09D-18]
         contOH(54,:)=[9.3, 1.10D-18,	1.10D-18, 1.12D-18, 1.14D-18, 
     *  1.16D-18, 1.19D-18, 1.21D-18, 1.22D-18, 1.23D-18]
         contOH(55,:)=[9.4, 1.29D-18,	1.29D-18, 1.30D-18, 1.32D-18, 
     *  1.35D-18, 1.37D-18, 1.38D-18, 1.39D-18, 1.40D-18]
         contOH(56,:)=[9.5, 1.48D-18,	1.48D-18, 1.49D-18, 1.52D-18, 
     *  1.54D-18, 1.56D-18, 1.57D-18, 1.57D-18, 1.57D-18]
         contOH(57,:)=[9.6, 1.63D-18,	1.64D-18, 1.67D-18, 1.70D-18, 
     *  1.73D-18, 1.74D-18, 1.75D-18, 1.75D-18, 1.74D-18]
         contOH(58,:)=[9.7, 1.73D-18,	1.77D-18, 1.82D-18, 1.86D-18, 
     *  1.89D-18, 1.90D-18, 1.91D-18, 1.90D-18, 1.89D-18]
         contOH(59,:)=[9.8, 1.79D-18,	1.85D-18, 1.92D-18, 1.98D-18, 
     *  2.01D-18, 2.03D-18, 2.03D-18, 2.02D-18, 2.01D-18]
         contOH(60,:)=[9.9, 1.79D-18,	1.89D-18, 2.00D-18, 2.07D-18, 
     *  2.11D-18, 2.12D-18, 2.13D-18, 2.12D-18, 2.10D-18]
         contOH(61,:)=[10.0,1.79D-18,	1.92D-18, 2.05D-18, 2.13D-18, 
     *  2.17D-18, 2.19D-18, 2.19D-18, 2.18D-18, 2.16D-18]
         contOH(62,:)=[10.1,1.77D-18,	1.94D-18, 2.09D-18, 2.18D-18, 
     *  2.23D-18, 2.24D-18, 2.24D-18, 2.23D-18, 2.21D-18]
         contOH(63,:)=[10.2,1.78D-18,	1.97D-18, 2.13D-18, 2.23D-18, 
     *  2.27D-18, 2.29D-18, 2.29D-18, 2.28D-18, 2.25D-18]
         contOH(64,:)=[10.3,1.84D-18,	2.04D-18, 2.20D-18, 2.29D-18, 
     *  2.33D-18, 2.35D-18, 2.34D-18, 2.32D-18, 2.30D-18]
         contOH(65,:)=[10.4,1.95D-18,	2.15D-18, 2.31D-18, 2.38D-18, 
     *  2.41D-18, 2.42D-18, 2.40D-18, 2.38D-18, 2.35D-18]
         contOH(66,:)=[10.5,2.12D-18,	2.32D-18, 2.45D-18, 2.50D-18, 
     *  2.52D-18, 2.51D-18, 2.49D-18, 2.46D-18, 2.43D-18] 
         contOH(67,:)=[10.6,2.35D-18,	2.54D-18, 2.63D-18, 2.66D-18,
     *  2.65D-18, 2.63D-18, 2.60D-18, 2.56D-18, 2.52D-18]
         contOH(68,:)=[10.7,2.66D-18,	2.82D-18, 2.87D-18, 2.86D-18, 
     *  2.83D-18, 2.79D-18, 2.74D-18, 2.69D-18, 2.65D-18]
         contOH(69,:)=[10.8,3.05D-18,	3.16D-18, 3.15D-18, 3.10D-18, 
     *  3.04D-18, 2.98D-18, 2.92D-18, 2.86D-18, 2.80D-18]
         contOH(70,:)=[10.9,3.50D-18,	3.56D-18, 3.49D-18, 3.39D-18, 
     *  3.30D-18, 3.21D-18, 3.13D-18, 3.06D-18, 2.99D-18]
         contOH(71,:)=[11.0,4.02D-18,	4.01D-18, 3.88D-18, 3.73D-18, 
     *  3.60D-18, 3.49D-18, 3.39D-18, 3.30D-18, 3.22D-18]
         contOH(72,:)=[11.1,4.61D-18,	4.52D-18, 4.31D-18, 4.11D-18, 
     *  3.94D-18, 3.80D-18, 3.68D-18, 3.58D-18, 3.48D-18]
         contOH(73,:)=[11.2,5.24D-18,	5.07D-18, 4.78D-18, 4.52D-18, 
     *  4.32D-18, 4.15D-18, 4.01D-18, 3.89D-18, 3.77D-18]
         contOH(74,:)=[11.3,5.89D-18,	5.64D-18, 5.27D-18, 4.96D-18, 
     *  4.72D-18, 4.53D-18, 4.36D-18, 4.22D-18, 4.09D-18]
         contOH(75,:)=[11.4,6.52D-18,	6.18D-18, 5.74D-18, 5.39D-18, 
     *  5.12D-18, 4.90D-18, 4.71D-18, 4.54D-18, 4.39D-18]
         contOH(76,:)=[11.5,7.08D-18,	6.66D-18, 6.16D-18, 5.77D-18, 
     *  5.47D-18, 5.22D-18, 5.02D-18, 4.83D-18, 4.66D-18]
         contOH(77,:)=[11.6,7.49D-18,	7.01D-18, 6.48D-18, 6.06D-18, 
     *  5.73D-18, 5.47D-18, 5.24D-18, 5.04D-18, 4.86D-18]
         contOH(78,:)=[11.7,7.72D-18,	7.19D-18, 6.63D-18, 6.20D-18, 
     *  5.87D-18, 5.59D-18, 5.35D-18, 5.14D-18, 4.95D-18]
         contOH(79,:)=[11.8,7.70D-18,	7.14D-18, 6.59D-18, 6.17D-18, 
     *  5.84D-18, 5.56D-18, 5.32D-18, 5.11D-18, 4.91D-18]
         contOH(80,:)=[11.9,7.43D-18,	6.88D-18, 6.36D-18, 5.96D-18, 
     *  5.64D-18, 5.37D-18, 5.14D-18, 4.93D-18, 4.73D-18]
         contOH(81,:)=[12.0,6.92D-18,	6.41D-18, 5.93D-18, 5.57D-18, 
     *  5.28D-18, 5.03D-18, 4.81D-18, 4.61D-18, 4.43D-18]
         contOH(82,:)=[12.1,6.23D-18,	5.77D-18, 5.36D-18, 5.05D-18, 
     *  4.79D-18, 4.57D-18, 4.37D-18, 4.19D-18, 4.02D-18]
         contOH(83,:)=[12.2,5.42D-18,	5.03D-18, 4.69D-18, 4.43D-18, 
     *  4.21D-18, 4.02D-18, 3.85D-18, 3.69D-18, 3.54D-18]
         contOH(84,:)=[12.3,4.56D-18,	4.23D-18, 3.97D-18, 3.76D-18, 
     *  3.58D-18, 3.42D-18, 3.28D-18, 3.14D-18, 3.02D-18]
         contOH(85,:)=[12.4,3.71D-18,	3.45D-18, 3.24D-18, 3.08D-18, 
     *  2.94D-18, 2.82D-18, 2.70D-18, 2.59D-18, 2.49D-18]
         contOH(86,:)=[12.5,2.90D-18,	2.71D-18, 2.56D-18, 2.44D-18, 
     *  2.33D-18, 2.24D-18, 2.14D-18, 2.06D-18, 1.98D-18]
         contOH(87,:)=[12.6,2.19D-18,	2.05D-18, 1.94D-18, 1.85D-18, 
     *  1.78D-18, 1.71D-18, 1.64D-18, 1.57D-18, 1.51D-18]
         contOH(88,:)=[12.7,1.59D-18,	1.48D-18, 1.41D-18, 1.35D-18, 
     *  1.30D-18, 1.25D-18, 1.20D-18, 1.15D-18, 1.11D-18]
         contOH(89,:)=[12.8,1.10D-18,	1.03D-18, 9.78D-19, 9.39D-19, 
     *  9.02D-19, 8.68D-19, 8.34D-19, 8.02D-19, 7.72D-19]
         contOH(90,:)=[12.9,7.23D-19,	6.74D-19, 6.42D-19, 6.17D-19, 
     *  5.93D-19, 5.71D-19, 5.49D-19, 5.29D-19, 5.09D-19]
         contOH(91,:)=[13.0,4.47D-19,	4.16D-19, 3.95D-19, 3.79D-19, 
     *  3.64D-19, 3.51D-19, 3.38D-19, 3.26D-19, 3.14D-19]
         contOH(92,:)=[13.1,2.57D-19,	2.37D-19, 2.24D-19, 2.14D-19, 
     *  2.06D-19, 1.98D-19, 1.91D-19, 1.84D-19, 1.78D-19]
         contOH(93,:)=[13.2,1.35D-19,	1.23D-19, 1.14D-19, 1.08D-19, 
     *  1.04D-19, 9.99D-20, 9.64D-20, 9.32D-20, 9.01D-20]
         contOH(94,:)=[13.3,6.22D-20,	5.50D-20, 4.98D-20, 4.64D-20, 
     *  4.42D-20, 4.25D-20, 4.11D-20, 3.98D-20, 3.86D-20]
         contOH(95,:)=[13.4,2.35D-20,	1.98D-20, 1.69D-20, 1.53D-20, 
     *  1.43D-20, 1.37D-20, 1.33D-20, 1.30D-20, 1.27D-20]
         contOH(96,:)=[13.5,5.69D-21,	4.58D-21, 3.76D-21, 3.34D-21, 
     *  3.15D-21, 3.07D-21, 3.03D-21, 3.01D-21, 2.99D-21]
         contOH(97,:)=[13.6,1.00D-21,	8.86D-22, 8.08D-22, 7.69D-22, 
     *  7.53D-22, 7.48D-22, 7.44D-22, 7.40D-22, 7.33D-22]
         contOH(98,:)=[13.7,7.68D-22,	6.71D-22, 5.89D-22, 5.27D-22, 
     *  4.79D-22, 4.39D-22, 4.06D-22, 3.77D-22, 3.52D-22]
         contOH(99,:)=[13.8,5.97D-22,	5.19D-22, 4.51D-22, 4.03D-22,  
     *  3.68D-22, 3.40D-22, 3.18D-22, 2.99D-22, 2.83D-22]
         contOH(100,:)=[13.9,4.61D-22,	4.02D-22, 3.47D-22, 3.09D-22, 
     *  2.81D-22, 2.60D-22, 2.43D-22, 2.29D-22, 2.17D-22]
         contOH(101,:)=[14.0,3.47D-22,	3.05D-22, 2.63D-22, 2.32D-22, 
     *  2.10D-22, 1.94D-22, 1.81D-22, 1.71D-22, 1.62D-22]
         contOH(102,:)=[14.1,2.49D-22,	2.23D-22, 1.95D-22, 1.73D-22, 
     *  1.57D-22, 1.46D-22, 1.37D-22, 1.30D-22, 1.23D-22]
         contOH(103,:)=[14.2,1.64D-22,	1.55D-22, 1.40D-22, 1.28D-22, 
     *  1.19D-22, 1.12D-22, 1.07D-22, 1.03D-22, 9.86D-23]
         contOH(104,:)=[14.3,9.53D-23,	9.79D-23, 9.42D-23, 8.95D-23, 
     *  8.58D-23, 8.30D-23, 8.06D-23, 7.85D-23, 7.65D-23]
         contOH(105,:)=[14.4,3.09D-23,	4.44D-23, 5.06D-23, 5.30D-23, 
     *  5.42D-23, 5.50D-23, 5.53D-23, 5.53D-23, 5.51D-23] 
         contOH(106,:)=[14.5,5.21D-24,	1.97D-23, 2.81D-23, 3.25D-23, 
     *  3.54D-23, 3.74D-23, 3.89D-23, 3.98D-23, 4.03D-23]
         contOH(107,:)=[14.6,3.42D-24,	1.29D-23, 1.86D-23, 2.19D-23, 
     *  2.44D-23, 2.64D-23, 2.79D-23, 2.89D-23, 2.96D-23]
         contOH(108,:)=[14.7,1.62D-24,	6.15D-24, 9.10D-24, 1.14D-23, 
     *  1.34D-23, 1.53D-23, 1.68D-23, 1.81D-23, 1.90D-23]
         contOH(109,:)=[14.8,2.48D-29,	4.88D-26, 5.62D-25, 1.79D-24, 
     *  3.44D-24, 5.15D-24, 6.71D-24, 8.03D-24, 9.09D-24]
         contOH(110,:)=[14.9,2.05D-29,	4.03D-26, 4.65D-25, 1.48D-24, 
     *  2.85D-24, 4.26D-24, 5.54D-24, 6.63D-24, 7.52D-24]
         contOH(111,:)=[15.0,1.88D-29,	3.71D-26, 4.28D-25, 1.36D-24, 
     *  2.62D-24, 3.92D-24, 5.11D-24, 6.11D-24, 6.92D-24]

         Tdiss=[1000., 2000., 3000., 4000., 5000., 6000., 
     * 7000 ., 8000., 9000.]



         do i=1, NT
         if (Tdiss(i) .gt. TK) exit
         enddo

         ilowT=i-1
         iupT=i
         Tlow=Tdiss(ilowT)
         Tup=Tdiss(iupT)

         alowT=(Tup-TK)/(Tup-Tlow)
         aupT=(TK-Tlow)/(Tup-Tlow)
        

        


         do i=1, NE
         if (contOH(i,1) .gt. enevm) exit
         enddo

         ilowE=i-1
         iupE=i
         Elow=contOH(ilowE,1)
         Eup=contOH(iupE,1)
 
         alowE=(Eup-enevm)/(Eup-Elow)
         aupE=(enevm-Elow)/(Eup-Elow)
        




 !      sect=sect(energy, temperature) 

         sect_ll=contOH(ilowE,ilowT+1)
         sect_lu=contOH(ilowE,iupT+1)
         sect_ul=contOH(iupE,ilowT+1)
         sect_uu=contOH(iupE,iupT+1)

         sect=alowE*alowT*sect_ll+alowE*aupT*sect_lu
     * +aupE*alowT*sect_ul+aupE*aupT*sect_uu


         OHcont(:)=sect*molconc(7,ID)





         endif


      END SUBROUTINE

      SUBROUTINE dissCH(ID, freq, NFREQ, TK, CHcont)
      use constants
      IMPLICIT NONE 
      
      integer, parameter :: NT=9
      integer, parameter :: NE=104


      integer i, ID, NFREQ, ilowT, iupT, ilowE, iupE
      real*8 freq(NFREQ),  CHcont(NFREQ)
      real*8 TK, Tlow, Tup, Elow, Eup
      real*8 alowT, aupT, alowE, aupE, lambdam, enevm
      real*8 sect_ll,  sect_lu, sect_ul, sect_uu, sect
      real*8 Tdiss(NT)
      real*8 contCH(NE,NT+1)
     
!        from Kurucz et al 1987
!        CH photodissaciation

     

        
         

         lambdam=(clight_cgs/freq(1)+clight_cgs/freq(NFREQ))/2. ! lambda in cm
         enevm=1./(eVtocm*lambdam)

         
 

         if ((TK .ge. 9000.) .or. (TK .le. 1000.) .or. (enevm .lt. 2.)
     *  .or. (enevm .gt. 15.)) then
         CHcont(:)=0.
         
         else

        contCH(1,:)=[0.2, 0.00D-00, 1.87D-33, 7.36D-31, 1.19D-29,
     *  5.53D-29, 1.42D-28, 2.63D-28, 4.03D-28, 5.49D-28]
         contCH(2,:)=[0.3, 0.00D-00, 2.58D-32, 1.02D-29, 1.65D-28,
     *  7.68D-28, 1.97D-27, 3.66D-27, 5.61D-27, 7.63D-27]
         contCH(3,:)=[0.4, 0.00D-00, 3.92D-31, 1.55D-28, 2.50D-27,
     *  1.17D-26, 3.00D-26, 5.56D-26, 8.53D-26, 1.16D-25]
         contCH(4,:)=[0.5, 0.00D-00, 3.07D-30, 1.20D-27, 1.94D-26,
     *  9.05D-26, 2.32D-25, 4.30D-25, 6.59D-25, 8.98D-25]
         contCH(5,:)=[0.6, 4.71D-38, 1.23D-29, 4.71D-27, 7.54D-26, 
     *  3.49D-25, 8.93D-25, 1.65D-24, 2.53D-24, 3.44D-24]
         contCH(6,:)=[0.7, 1.56D-37, 3.04D-29, 1.11D-26, 1.74D-25, 
     *  7.97D-25, 2.02D-24, 3.73D-24, 5.69D-24, 7.71D-24]
         contCH(7,:)=[0.8, 6.06D-37, 6.13D-29, 2.09D-26, 3.18D-25, 
     *  1.44D-24, 3.61D-24, 6.60D-24, 1.00D-23, 1.35D-23]
         contCH(8,:)=[0.9, 1.74D-36, 1.14D-28, 3.58D-26, 5.24D-25, 
     *  2.32D-24, 5.74D-24, 1.04D-23, 1.57D-23, 2.10D-23]
         contCH(9,:)=[1.0, 4.26D-36, 1.97D-28, 5.75D-26, 8.16D-25, 
     *  3.54D-24, 8.66D-24, 1.55D-23, 2.33D-23, 3.11D-23]
         contCH(10,:)=[1.1, 1.44D-35, 3.35D-28, 9.05D-26, 1.25D-24, 
     *  5.31D-24, 1.28D-23, 2.29D-23, 3.41D-23, 4.54D-23]
         contCH(11,:)=[1.2, 7.40D-35, 6.01D-28, 1.43D-25, 1.89D-24, 
     *  7.90D-24, 1.89D-23, 3.34D-23, 4.94D-23, 6.55D-23]
         contCH(12,:)=[1.3, 5.62D-34, 1.37D-27, 2.47D-25, 3.00D-24, 
     *  1.20D-23, 2.82D-23, 4.91D-23, 7.20D-23, 9.48D-23]
         contCH(13,:)=[1.4, 1.52D-33, 2.06D-27, 3.49D-25, 4.15D-24, 
     *  1.65D-23, 3.82D-23, 6.63D-23, 9.69D-23, 1.27D-22]
         contCH(14,:)=[1.5, 1.93D-32, 8.23D-27, 7.85D-25, 7.58D-24, 
     *  2.75D-23, 6.07D-23, 1.02D-22, 1.46D-22, 1.89D-22]
         contCH(15,:)=[1.6, 3.61D-32, 1.25D-26, 1.16D-24, 1.09D-23, 
     *  3.85D-23, 8.39D-23, 1.40D-22, 1.98D-22, 2.55D-22]
         contCH(16,:)=[1.7, 5.81D-31, 6.10D-26, 3.09D-24, 2.21D-23, 
     *  6.88D-23, 1.40D-22, 2.22D-22, 3.07D-22, 3.87D-22]
         contCH(17,:)=[1.8, 1.52D-30, 1.22D-25, 5.20D-24, 3.35D-23, 
     *  9.84D-23, 1.93D-22, 3.01D-22, 4.09D-22, 5.10D-22]
         contCH(18,:)=[1.9, 1.23D-29, 3.03D-25, 9.15D-24, 5.24D-23, 
     *  1.47D-22, 2.81D-22, 4.31D-22, 5.81D-22, 7.20D-22]
         contCH(19,:)=[2.0, 3.80D-29, 8.19D-25, 2.24D-23, 1.13D-22, 
     *  2.84D-22, 5.06D-22, 7.39D-22, 9.60D-22, 1.16D-21]
         contCH(20,:)=[2.1, 8.19D-29, 1.41D-24, 3.37D-23, 1.57D-22, 
     *  3.78D-22, 6.57D-22, 9.47D-22, 1.22D-21, 1.46D-21]
         contCH(21,:)=[2.2, 1.87D-27, 7.31D-24, 1.01D-22, 3.63D-22, 
     *  7.63D-22, 1.22D-21, 1.68D-21, 2.09D-21, 2.45D-21]
         contCH(22,:)=[2.3, 1.07D-27, 6.33D-24, 1.18D-22, 4.86D-22, 
     *  1.07D-21, 1.75D-21, 2.39D-21, 2.96D-21, 3.44D-21]
         contCH(23,:)=[2.4, 7.52D-27, 2.01D-23, 2.60D-22, 8.48D-22, 
     *  1.62D-21, 2.39D-21, 3.06D-21, 3.61D-21, 4.06D-21]
         contCH(24,:)=[2.5, 9.00D-26, 7.60D-23, 6.40D-22, 1.73D-21, 
     *  3.04D-21, 4.30D-21, 5.39D-21, 6.30D-21, 7.04D-21]
         contCH(25,:)=[2.6, 3.23D-25, 1.40D-22, 1.17D-21, 3.27D-21, 
     *  5.82D-21, 8.24D-21, 1.03D-20, 1.19D-20, 1.32D-20]
         contCH(26,:)=[2.7, 3.84D-24, 7.47D-22, 4.15D-21, 9.03D-21, 
     *  1.36D-20, 1.70D-20, 1.95D-20, 2.12D-20, 2.23D-20]
         contCH(27,:)=[2.8, 6.77D-23, 3.15D-21, 1.20D-20, 2.20D-20, 
     *  3.02D-20, 3.58D-20, 3.95D-20, 4.18D-20, 4.31D-20]
         contCH(28,:)=[2.9, 3.06D-22, 9.34D-21, 2.95D-20, 4.91D-20, 
     *  6.32D-20, 7.21D-20, 7.73D-20, 8.01D-20, 8.16D-20]
         contCH(29,:)=[3.0, 1.17D-21, 2.29D-20, 6.47D-20, 1.01D-19, 
     *  1.24D-19, 1.37D-19, 1.43D-19, 1.46D-19, 1.46D-19]
         contCH(30,:)=[3.1, 4.35D-21, 4.65D-20, 1.15D-19, 1.70D-19, 
     *  2.02D-19, 2.18D-19, 2.24D-19, 2.24D-19, 2.22D-19]
         contCH(31,:)=[3.2, 1.38D-20, 8.51D-20, 1.75D-19, 2.40D-19, 
     *  2.74D-19, 2.88D-19, 2.91D-19, 2.89D-19, 2.84D-19]
         contCH(32,:)=[3.3, 3.26D-20, 1.41D-19, 2.42D-19, 3.01D-19, 
     *  3.28D-19, 3.35D-19, 3.32D-19, 3.26D-19, 3.17D-19]
         contCH(33,:)=[3.4, 5.86D-20, 1.96D-19, 2.93D-19, 3.38D-19, 
     *  3.52D-19, 3.49D-19, 3.40D-19, 3.29D-19, 3.18D-19]
         contCH(34,:)=[3.5, 8.86D-20, 2.21D-19, 2.99D-19, 3.28D-19, 
     *  3.30D-19, 3.21D-19, 3.09D-19, 2.97D-19, 2.86D-19]
         contCH(35,:)=[3.6, 1.22D-19, 2.14D-19, 2.62D-19, 2.75D-19, 
     *  2.71D-19, 2.61D-19, 2.50D-19, 2.41D-19, 2.32D-19]
         contCH(36,:)=[3.7, 1.46D-19, 1.87D-19, 2.06D-19, 2.07D-19, 
     *  2.00D-19, 1.93D-19, 1.86D-19, 1.80D-19, 1.75D-19]
         contCH(37,:)=[3.8, 1.37D-19, 1.45D-19, 1.46D-19, 1.42D-19, 
     *  1.37D-19, 1.32D-19, 1.29D-19, 1.27D-19, 1.26D-19]
         contCH(38,:)=[3.9, 9.56D-20, 9.25D-20, 8.93D-20, 8.63D-20, 
     *  8.49D-20, 8.51D-20, 8.62D-20, 8.75D-20, 8.89D-20]
         contCH(39,:)=[4.0, 4.46D-20, 4.25D-20, 4.15D-20, 4.24D-20, 
     *  4.56D-20, 5.01D-20, 5.49D-20, 5.93D-20, 6.32D-20]
         contCH(40,:)=[4.1, 1.72D-20, 1.66D-20, 1.73D-20, 2.06D-20, 
     *  2.67D-20, 3.42D-20, 4.18D-20, 4.86D-20, 5.44D-20]
         contCH(41,:)=[4.2, 7.18D-21, 7.06D-21, 8.19D-21, 1.23D-20, 
     *  1.93D-20, 2.76D-20, 3.58D-20, 4.32D-20, 4.94D-20]
         contCH(42,:)=[4.3, 2.93D-21, 2.99D-21, 4.87D-21, 1.07D-20, 
     *  1.97D-20, 2.96D-20, 3.88D-20, 4.67D-20, 5.32D-20]
         contCH(43,:)=[4.4, 1.18D-21, 1.35D-21, 4.31D-21, 1.28D-20,
     *  2.49D-20, 3.75D-20, 4.87D-20, 5.80D-20, 6.55D-20]
         contCH(44,:)=[4.5, 3.91D-22, 6.63D-22, 4.17D-21, 1.39D-20, 
     *  2.78D-20, 4.22D-20, 5.50D-20, 6.55D-20, 7.39D-20]
         contCH(45,:)=[4.6, 6.47D-23, 6.81D-22, 6.22D-21, 1.91D-20, 
     *  3.57D-20, 5.21D-20, 6.61D-20, 7.72D-20, 8.59D-20]
         contCH(46,:)=[4.7, 5.63D-24, 1.21D-21, 1.06D-20, 2.91D-20, 
     *  5.03D-20, 6.93D-20, 8.45D-20, 9.60D-20, 1.04D-19]
         contCH(47,:)=[4.8, 3.99D-24, 1.77D-21, 1.42D-20, 3.74D-20, 
     *  6.27D-20, 8.46D-20, 1.02D-19, 1.14D-19, 1.23D-19]
         contCH(48,:)=[4.9, 1.85D-23, 3.50D-21, 2.11D-20, 4.98D-20,
     *  7.98D-20, 1.05D-19, 1.25D-19, 1.39D-19, 1.49D-19]
         contCH(49,:)=[5.0, 4.99D-23, 7.02D-21, 3.46D-20, 7.32D-20, 
     *  1.10D-19, 1.39D-19, 1.60D-19, 1.74D-19, 1.84D-19]
         contCH(50,:)=[5.1, 1.18D-22, 1.15D-20, 5.15D-20, 1.02D-19, 
     *  1.45D-19, 1.77D-19, 1.99D-19, 2.13D-19, 2.22D-19]
         contCH(51,:)=[5.2, 5.18D-22, 2.20D-20, 7.88D-20, 1.40D-19, 
     *  1.89D-19, 2.22D-19, 2.43D-19, 2.56D-19, 2.64D-19]
         contCH(52,:)=[5.3, 1.50D-21, 4.09D-20, 1.17D-19, 1.88D-19, 
     *  2.40D-19, 2.74D-19, 2.96D-19, 3.09D-19, 3.17D-19]
         contCH(53,:)=[5.4, 3.28D-21, 6.30D-20, 1.61D-19, 2.45D-19, 
     *  3.05D-19, 3.45D-19, 3.69D-19, 3.84D-19, 3.92D-19]
         contCH(54,:)=[5.5, 1.23D-20, 1.19D-19, 2.58D-19, 3.64D-19, 
     *  4.31D-19, 4.69D-19, 4.89D-19, 4.97D-19, 4.98D-19]
         contCH(55,:)=[5.6, 3.92D-20, 2.43D-19, 4.36D-19, 5.52D-19, 
     *  6.09D-19, 6.28D-19, 6.28D-19, 6.19D-19, 6.06D-19]
         contCH(56,:)=[5.7, 8.26D-20, 3.81D-19, 6.00D-19, 7.04D-19,
     *  7.37D-19, 7.36D-19, 7.19D-19, 6.97D-19, 6.74D-19]
         contCH(57,:)=[5.8, 1.43D-19, 5.06D-19, 7.11D-19, 7.92D-19,
     *  8.10D-19, 8.02D-19, 7.82D-19, 7.59D-19, 7.37D-19]
         contCH(58,:)=[5.9, 6.92D-19, 9.54D-19, 1.05D-18, 1.08D-18, 
     *  1.07D-18, 1.05D-18, 1.03D-18, 1.00D-18, 9.75D-19]
         contCH(59,:)=[6.0, 1.72D-18, 2.02D-18, 2.06D-18, 2.00D-18, 
     *  1.91D-18, 1.82D-18, 1.73D-18, 1.66D-18, 1.59D-18]
         contCH(60,:)=[6.1, 4.12D-18, 4.23D-18, 3.98D-18, 3.63D-18, 
     *  3.29D-18, 3.00D-18, 2.76D-18, 2.57D-18, 2.42D-18]
         contCH(61,:)=[6.2, 7.53D-18, 6.78D-18, 5.89D-18, 5.10D-18, 
     *  4.45D-18, 3.95D-18, 3.56D-18, 3.25D-18, 3.02D-18]
         contCH(62,:)=[6.3, 8.05D-18, 7.06D-18, 6.06D-18, 5.22D-18, 
     *  4.55D-18, 4.03D-18, 3.63D-18, 3.31D-18, 3.07D-18]
         contCH(63,:)=[6.4, 6.72D-18, 5.89D-18, 5.12D-18, 4.49D-18, 
     *  3.98D-18, 3.57D-18, 3.24D-18, 2.99D-18, 2.78D-18]
         contCH(64,:)=[6.5, 4.72D-18, 4.18D-18, 3.75D-18, 3.42D-18, 
     *  3.12D-18, 2.88D-18, 2.67D-18, 2.50D-18, 2.36D-18]
         contCH(65,:)=[6.6, 2.76D-18, 2.53D-18, 2.46D-18, 2.42D-18, 
     *  2.35D-18, 2.27D-18, 2.18D-18, 2.10D-18, 2.02D-18]
         contCH(66,:)=[6.7, 1.43D-18, 1.42D-18, 1.60D-18, 1.78D-18, 
     *  1.89D-18, 1.92D-18, 1.92D-18, 1.90D-18, 1.86D-18]
         contCH(67,:)=[6.8, 7.06D-19, 8.16D-19, 1.14D-18, 1.46D-18, 
     *  1.67D-18, 1.79D-18, 1.84D-18, 1.85D-18, 1.84D-18]
         contCH(68,:)=[6.9, 3.27D-19, 5.03D-19, 9.17D-19, 1.32D-18, 
     *  1.59D-18, 1.75D-18, 1.83D-18, 1.86D-18, 1.87D-18]
         contCH(69,:)=[7.0, 1.48D-19, 3.63D-19, 8.01D-19, 1.22D-18, 
     *  1.51D-18, 1.69D-18, 1.79D-18, 1.85D-18, 1.87D-18]
         contCH(70,:)=[7.1, 8.52D-20, 3.36D-19, 7.74D-19, 1.19D-18, 
     *  1.49D-18, 1.69D-18, 1.82D-18, 1.90D-18, 1.94D-18]
         contCH(71,:)=[7.2, 9.05D-20, 4.11D-19, 8.86D-19, 1.32D-18, 
     *  1.65D-18, 1.87D-18, 2.00D-18, 2.08D-18, 2.13D-18]
         contCH(72,:)=[7.3, 1.61D-19, 6.90D-19, 1.34D-18, 1.83D-18, 
     *  2.15D-18, 2.32D-18, 2.40D-18, 2.43D-18, 2.43D-18]
         contCH(73,:)=[7.4, 3.45D-19, 1.24D-18, 2.04D-18, 2.49D-18, 
     *  2.68D-18, 2.72D-18, 2.68D-18, 2.62D-18, 2.55D-18]
         contCH(74,:)=[7.5, 7.61D-19, 2.09D-18, 2.89D-18, 3.12D-18, 
     *  3.08D-18, 2.95D-18, 2.79D-18, 2.64D-18, 2.51D-18]
         contCH(75,:)=[7.6, 1.48D-18, 2.25D-18, 2.60D-18, 2.67D-18, 
     *  2.62D-18, 2.53D-18, 2.43D-18, 2.34D-18, 2.26D-18]
         contCH(76,:)=[7.7, 4.25D-18, 5.01D-18, 5.12D-18, 4.94D-18, 
     *  4.65D-18, 4.35D-18, 4.08D-18, 3.85D-18, 3.65D-18]
         contCH(77,:)=[7.8, 1.60D-17, 1.64D-17, 1.50D-17, 1.31D-17, 
     *  1.14D-17, 9.94D-18, 8.80D-18, 7.92D-18, 7.22D-18]
         contCH(78,:)=[7.9, 3.82D-17, 3.24D-17, 2.64D-17, 2.14D-17, 
     *  1.76D-17, 1.48D-17, 1.27D-17, 1.12D-17, 9.99D-18]
         contCH(79,:)=[8.0, 2.24D-17, 2.02D-17, 1.75D-17, 1.50D-17, 
     *  1.29D-17, 1.13D-17, 9.96D-18, 8.95D-18, 8.17D-18]
         contCH(80,:)=[8.1, 1.21D-17, 1.16D-17, 1.07D-17, 9.64D-18, 
     *  8.63D-18, 7.75D-18, 7.04D-18, 6.46D-18, 6.00D-18]
         contCH(81,:)=[8.2, 6.46D-18, 6.31D-18, 6.02D-18, 5.61D-18, 
     *  5.17D-18, 4.77D-18, 4.42D-18, 4.13D-18, 3.90D-18]
         contCH(82,:)=[8.3, 2.45D-18, 2.53D-18, 2.58D-18, 2.55D-18, 
     *  2.47D-18, 2.37D-18, 2.27D-18, 2.18D-18, 2.10D-18]
         contCH(83,:)=[8.4, 6.04D-19, 6.82D-19, 7.83D-19, 8.55D-19, 
     *  8.98D-19, 9.17D-19, 9.22D-19, 9.20D-19, 9.13D-19]
         contCH(84,:)=[8.5, 7.77D-20, 9.99D-20, 1.45D-19, 1.93D-19, 
     *  2.33D-19, 2.64D-19, 2.85D-19, 3.00D-19, 3.11D-19]
         contCH(85,:)=[8.6, 4.13D-22, 4.86D-21, 1.76D-20, 3.38D-20, 
     *  4.91D-20, 6.19D-20, 7.19D-20, 7.96D-20, 8.54D-20]
         contCH(86,:)=[8.7, 3.94D-21, 1.77D-20, 3.02D-20, 3.78D-20, 
     *  4.15D-20, 4.30D-20, 4.33D-20, 4.31D-20, 4.26D-20]
         contCH(87,:)=[8.8, 5.08D-21, 2.63D-20, 4.60D-20, 5.75D-20, 
     *  6.21D-20, 6.27D-20, 6.13D-20, 5.92D-20, 5.69D-20]
         contCH(88,:)=[8.9, 3.16D-21, 2.06D-20, 4.08D-20, 5.52D-20, 
     *  6.33D-20, 6.69D-20, 6.79D-20, 6.75D-20, 6.65D-20]
         contCH(89,:)=[9.0, 1.17D-21, 1.05D-20, 2.48D-20, 3.76D-20, 
     *  4.68D-20, 5.27D-20, 5.62D-20, 5.82D-20, 5.93D-20]
         contCH(90,:)=[9.1, 2.76D-22, 3.59D-21, 1.10D-20, 1.95D-20, 
     *  2.67D-20, 3.22D-20, 3.61D-20, 3.89D-20, 4.09D-20]
         contCH(91,:)=[9.2, 2.68D-23, 1.05D-21, 4.06D-21, 7.76D-21, 
     *  1.12D-20, 1.43D-20, 1.68D-20, 1.89D-20, 2.06D-20]
         contCH(92,:)=[9.3, 5.01D-24, 3.94D-22, 1.69D-21, 3.46D-21, 
     *  5.32D-21, 7.12D-21, 8.76D-21, 1.02D-20, 1.14D-20]
         contCH(93,:)=[9.4, 8.53D-24, 4.91D-22, 1.77D-21, 3.20D-21, 
     *  4.49D-21, 5.60D-21, 6.54D-21, 7.32D-21, 7.98D-21]
         contCH(94,:)=[9.5, 1.27D-23, 6.02D-22, 1.96D-21, 3.31D-21, 
     *  4.35D-21, 5.10D-21, 5.64D-21, 6.02D-21, 6.30D-21]
         contCH(95,:)=[9.6, 6.03D-24, 3.63D-22, 1.33D-21, 2.38D-21, 
     *  3.24D-21, 3.86D-21, 4.29D-21, 4.57D-21, 4.76D-21]
         contCH(96,:)=[9.7, 2.91D-24, 2.15D-22, 8.48D-22, 1.60D-21, 
     *  2.24D-21, 2.72D-21, 3.06D-21, 3.30D-21, 3.46D-21]
         contCH(97,:)=[9.8, 1.54D-24, 1.19D-22, 4.83D-22, 9.32D-22, 
     *  1.34D-21, 1.65D-21, 1.89D-21, 2.05D-21, 2.17D-21]
         contCH(98,:)=[9.9, 5.71D-25, 4.80D-23, 2.06D-22, 4.17D-22, 
     *  6.22D-22, 7.96D-22, 9.32D-22, 1.03D-21, 1.11D-21]
         contCH(99,:)=[10.0, 1.04D-25, 1.07D-23, 5.15D-23, 1.13D-22, 
     *  1.81D-22, 2.42D-22, 2.93D-22, 3.33D-22, 3.64D-22]
         contCH(100,:)=[10.1, 4.70D-27, 9.97D-25, 6.32D-24, 1.69D-23, 
     *  3.05D-23, 4.42D-23, 5.62D-23, 6.61D-23, 7.40D-23]
         contCH(101,:)=[10.2, 2.75D-27, 5.85D-25, 3.33D-24, 7.44D-24, 
     *  1.14D-23, 1.45D-23, 1.68D-23, 1.84D-23, 1.95D-23]
         contCH(102,:)=[10.3, 8.75D-29, 2.82D-25, 3.01D-24, 8.05D-24, 
     *  1.28D-23, 1.60D-23, 1.78D-23, 1.86D-23, 1.88D-23]
         contCH(103,:)=[10.4, 1.55D-28, 5.00D-25, 5.33D-24, 1.42D-23, 
     *  2.25D-23, 2.81D-23, 3.11D-23, 3.25D-23, 3.28D-23]
         contCH(104,:)=[10.5, 9.40D-29, 3.03D-25, 3.23D-24, 8.60D-24, 
     *  1.36D-23, 1.70D-23, 1.89D-23, 1.97D-23, 1.98D-23]


        


        

         Tdiss=[1000., 2000., 3000., 4000., 5000., 6000., 
     * 7000 ., 8000., 9000.]



         do i=1, NT
         if (Tdiss(i) .gt. TK) exit
         enddo

         ilowT=i-1
         iupT=i
         Tlow=Tdiss(ilowT)
         Tup=Tdiss(iupT)

         alowT=(Tup-TK)/(Tup-Tlow)
         aupT=(TK-Tlow)/(Tup-Tlow)
        

        


         do i=1, NE
         if (contCH(i,1) .gt. enevm) exit
         enddo

         ilowE=i-1
         iupE=i
         Elow=contCH(ilowE,1)
         Eup=contCH(iupE,1)
 
         alowE=(Eup-enevm)/(Eup-Elow)
         aupE=(enevm-Elow)/(Eup-Elow)
        




 !      sect=sect(energy, temperature) 

         sect_ll=contCH(ilowE,ilowT+1)
         sect_lu=contCH(ilowE,iupT+1)
         sect_ul=contCH(iupE,ilowT+1)
         sect_uu=contCH(iupE,iupT+1)

         sect=alowE*alowT*sect_ll+alowE*aupT*sect_lu
     * +aupE*alowT*sect_ul+aupE*aupT*sect_uu


         CHcont(:)=sect*molconc(2,ID)





         endif


      END SUBROUTINE





      Subroutine Herzberg(ID, freq, NFREQ, opacH)
      use constants
      IMPLICIT NONE
      integer ID, NFREQ, Nfr, nunit
      integer i, j, jmin, jmax, num
      real*8 freq(NFREQ), opacH(NFREQ)
      real*8, allocatable::wav(:), sect(:)
      real*8 lambda, sectw
      nunit=991

     

      open(nunit, file='O2_H', status='old', ACTION='READ')
      read(nunit,*) Nfr

      allocate(wav(Nfr))
      allocate(sect(Nfr)) 

      do i=1, Nfr
      read(nunit,*) wav(i), sect(i)
      enddo

      close(nunit)

      j=1
      do while (1.d7*clight_cgs/freq(j) .gt. wav(Nfr)) 
      opacH(j)=0.
      j=j+1
      enddo
      jmin=j
     
      j=Nfreq
      do while (1.d7*clight_cgs/freq(j) .lt. wav(1))
      opacH(j)=0.
      j=j-1
      enddo
      jmax=j


   !   print*, jmin, jmax

      num=Nfr      

      do i=jmin, jmax
      lambda=1.d7*clight_cgs/freq(i)
      do while  (lambda .le. wav(num-1))  
      num=num-1     
      enddo

      sectw=sect(num-1)+(lambda-wav(num-1))*(sect(num)-sect(num-1))
     c /(wav(num)-wav(num-1))
      
      opacH(i)=1.d-24*sectw*molconc(8,ID)
       
   !   print*,'test', ID, sectw, molconc(8, ID)    

      enddo



      END SUBROUTINE





      SUBROUTINE readMolconc(ND)
      integer ND
      integer i, j, nunit1   
      print*, 'readMolconc allocation'
      allocate(molconc(Nmol,ND))
      nunit1=990
      open(nunit1, file='MolConc.txt', status='old',  ACTION='READ')

      do j=1, Nmol

      do i=1, ND
      read(nunit1,550) molconc(j,i)
 550      format(e15.5)
      enddo

      enddo

      close(nunit1)
 !     stop


      END SUBROUTINE
 


      SUBROUTINE PARTFmol_old(j, T, PF)
      real*8 T, PF, atemp, sumpart
      integer i, j
      
      atemp   = dlog(min(T,16000.))
      
      
      do i=0,5
      sumpart=sumpart+coeff(i+1,j)*atemp**i
      enddo
      PF=exp(sumpart)
 
      END SUBROUTINE




      SUBROUTINE PARTFmol(j, T, PF)
      real*8 T, PF, logP, phiT
      real*8 phi(5)
      integer i, j
      phiT=log10(5040./T)
      phi(1)=1.
      phi(2)=phiT
      phi(3)=phi(2)*phiT
      phi(4)=phi(3)*phiT
      phi(5)=phi(4)*phiT

      logP=0

      DO i=1, 5
      logP=logP+coeff(i,j)*phi(i)
      ENDDO


      PF=10.**logP


      END SUBROUTINE

  



 



      SUBROUTINE calcmolopac(NFREQ,freq, TL, ID)

      use constants

      implicit none

      integer i, j,  NFREQ, ID, mn
      real*8 freq(NFREQ), lambdap(NFREQ)
      real*8 lambdal, Delta, Deltasel
      real*8 gu, gl, mu, lambdamin, lambdamax
      real*8  Nlow
      real*8 PF, PROF, TL
    

      Delta=0.2 ! in A
      Deltasel=1.


      lambdamin=min(clight_cgs/freq(1)*1.d8, clight_cgs/freq(NFREQ)
     *    *1.d8)-Deltasel       
      lambdamax=max(clight_cgs/freq(1)*1.d8, clight_cgs/freq(NFREQ)
     *    *1.d8)+Deltasel   

  

      do mn=1, Nmol


    
      call PARTFmol(mn, TL, PF)
 

  

       imin(mn)=1
       imax(mn)=1

       do j=1, Nlines(mn)

       lambdal=1.d8/Mollines(mn)%Etran(j)

       if (lambdal .le. lambdamin) then
       imin(mn)=j
       endif

       if (lambdal .le. lambdamax) then
       imax(mn)=j
       endif

       enddo

       if (imin(mn) .eq. imax(mn)) imax(mn)=0  


    

!       print*, 'Calc start'

       do j=imin(mn), imax(mn)

       gu=2.*Mollines(mn)%Jup(j)+1.
       gl=2.*Mollines(mn)%Jlow(j)+1. 
       mu=clight_cgs*Mollines(mn)%Etran(j)
      
   
!     ******** ATTENTION!!! correction for the SRPM list  *************                                                                        

       Nlow=molconc(mn,ID)*exp(-Mollines(mn)%Elow(j)
     * /(kBoltzmann*TL))/PF


       alpha0(mn,j)=(clight_cgs**2./(8.*PI*mu**2.))*Mollines(mn)%Aabs(j)
     $ *Nlow*(1.-exp(-Mollines(mn)%Etran(j)/(kBoltzmann*TL)))


!     *****************************************************************   

       if ((mn .eq. 2) .or. (mn .eq. 3) .or. 
     * (mn .eq. 6) .or. (mn .eq. 7) ) then


 !      if ((mn .eq. 6) .or. (mn .eq. 3) .or. 
 !    * (mn .eq. 7)   ) then

 !       if (mn .eq. 2) then 


       Nlow=molconc(mn,ID)*gl*exp(-Mollines(mn)%Elow(j)
     * /(kBoltzmann*TL))/PF


       alpha0(mn,j)=(clight_cgs**2./(8.*PI*mu**2.))*Mollines(mn)%Aabs(j)
     * *Nlow*(gu/gl)*(1.-exp(-Mollines(mn)%Etran(j)/(kBoltzmann*TL)))

      
       endif


!      *****************************************************



 !     if (mn .eq. 7) then 
 !     alpha0(mn,j)=alpha0(mn,j)/0.536  ! only in case of A05!!!
 !     endif


 !    if (mn .eq. 6) then 
 !    alpha0(mn,j)=alpha0(mn,j)/0.536  ! TEST!!!
 !    endif

          if (mn .eq. 6) then 
          alpha0(mn,j)=alpha0(mn,j)*0.5
          endif
          lambdal=1.d8/Mollines(mn)%Etran(j)


       if ((mn .eq. 2) .and.  (lambdal .gt. 4000.) .and. 
     * (lambdal .lt. 4900))  then 
       alpha0(mn,j)=alpha0(mn,j)*0.5
       endif



       enddo

   

       enddo



      END SUBROUTINE




 
      




      subroutine mol_ab(ABXYZn, ABXYZ, SYMBOL, ENTOT, T, NATOM, ND)

      implicit none

      integer, intent(in) :: ND, NATOM

      integer  i, j, nunit1
      CHARACTER*2 SYMBOL(NATOM)
      real*8 ABXYZ(NATOM), corr(NATOM), ENTOT(ND), T(ND)
      real*8 ABXYZn(NATOM, ND)
      real*8 entot_nl, T_nl
      real*8 KnC2, KnCH, KnCN, KnCO, KnH2, KnNH, KnOH, KnO2     
      real*8 atcon(4), apnew(4)
      real*8 Nconc(Nmol, ND)
        
 
      do i = 1, ND

      entot_nl = ENTOT(i)

      T_nl = T(i)

      call chemeq(entot_nl, T_nl, ABXYZ, SYMBOL, apnew, atcon, corr, NATOM)
 
      CALL Kmol(T_nl, 'C2', KnC2)
      CALL Kmol(T_nl, 'CH', KnCH)
      CALL Kmol(T_nl, 'CN', KnCN)
      CALL Kmol(T_nl, 'CO', KnCO)
      CALL Kmol(T_nl, 'H2', KnH2)
      CALL Kmol(T_nl, 'NH', KnNH)
      CALL Kmol(T_nl, 'OH', KnOH)
 
      Nconc(1,i)=apnew(2)*apnew(2)/KnC2
      Nconc(2,i)=apnew(1)*apnew(2)/KnCH
      Nconc(3,i)=apnew(2)*apnew(3)/KnCN
      Nconc(4,i)=apnew(2)*apnew(4)/KnCO
      Nconc(5,i)=apnew(1)*apnew(1)/KnH2
      Nconc(6,i)=apnew(1)*apnew(3)/KnNH
      Nconc(7,i)=apnew(1)*apnew(4)/KnOH
 
         do j = 1, NATOM

            ABXYZn(j, i) = ABXYZ(j) * corr(j) 

         enddo

      enddo
 
      nunit1=990
      open(nunit1, file='MolConc.txt', status='unknown')

      do j=1, Nmol 
       
      do i=1, ND
      write(nunit1,50) Nconc(j,i)
 50   format(e15.5) 
      enddo

      enddo


      close(nunit1)    

 
      nunit1=690
      open(nunit1, file='Molpres.txt', status='unknown')

 

      do i=1, ND
      write(nunit1,250) Nconc(5,i), Nconc(3,i),N conc(4,i), Nconc(2,i)
 250      format(4(e15.5,2x))
      enddo

      close(nunit1)

      END SUBROUTINE


      SUBROUTINE chemeq(entot_nl, T_nl, ABXYZ, SYMBOL, apnew, atcon, corr, NATOM)
  
      implicit none 

      integer nn
      PARAMETER (NN=4)

      integer, intent(in) :: NATOM

      CHARACTER*2 atom(4), mol(4,4)
      CHARACTER*2 SYMBOL(NATOM)
      INTEGER N, i, j, ntrial, nl, num(NN)
      real*8 ABXYZ(NATOM), entot_nl, corr(NATOM)

      real*8 ap(4), apnew(4), atcon(4)
      real*8 tolx, tolf, T_nl
      PARAMETER(ntrial=10)
      

      corr(1 : NATOM) = 1.
 
      CALL readmol(N, atom, mol)

      do i=1, N
       do j=1, NATOM
        if (atom(i) .eq. SYMBOL(j)) then
        ap(i)=ENTOT_nl*ABXYZ(j)
        num(i)=j
        endif
       enddo
      enddo

      atcon(1:4)=ap(1:4)
      
      tolx=0.        ! test
      tolf=0.        ! test

      call mnewt(ntrial, ap, N, tolx, tolf, T_nl, atcon, atom, mol, NATOM)
   

   
      apnew(1:4)=ap(1:4)

      do i=1, N
      j=num(i)
      corr(j)=apnew(i)/atcon(i)

      enddo


      end subroutine




      SUBROUTINE fvecjac(ap, N, fvec, fjac, T, atcon, atom, mol, NATOM)
     
      implicit none 

      integer nn
      PARAMETER (NN=4)

      integer, intent(in) :: NATOM

      CHARACTER*2 atom(4), mol(4,4)
      CHARACTER*2 SYMBOL(NATOM), molec
      INTEGER N, i, j, l

      real*8 ap(4), atcon(4)
      real*8 fvec(4), fjac(4,4)
      real*8  Kn, T, sum
    

 

!     Values at ap    

      do i=1, N
      sum=0
       do j=1, N
        if (i .eq. j) then 
        
        molec=trim(atom(i))//'2'
        call Kmol(T, molec, Kn)
        sum=sum+2.*ap(i)/Kn
        
        else
        
        molec=trim(atom(i))//trim(atom(j))
        call Kmol(T, molec, Kn)
        sum=sum+ap(j)/Kn

        endif

       enddo   
      fvec(i)=(sum+1.)*ap(i)-atcon(i) 
      enddo


!     Jacobian matrix at ap


      do i=1, N
       do j=1, N
       fjac(i,j)=0.
        if (i .eq. j) then         
               do l=1, N
                 if (l .eq. i) then
                 molec=trim(atom(i))//'2'
                 call Kmol(T, molec, Kn)
                 fjac(i,j)=fjac(i,j)+4.*ap(i)/Kn
                 else
                 molec=trim(atom(i))//trim(atom(l))
                 call Kmol(T, molec, Kn)
                 fjac(i,j)=fjac(i,j)+ap(l)/Kn
                 endif
               enddo  
               fjac(i,j)=fjac(i,j)+1.
        else
        molec=trim(atom(i))//trim(atom(j))
        call Kmol(T, molec, Kn)
        fjac(i,j)=ap(i)/Kn
        endif
       enddo
      enddo
    


      end subroutine




      
      SUBROUTINE readmol(N, atom, mol)
      IMPLICIT NONE 
      INTEGER N, NN, i, nunit1
      PARAMETER(NN=4)
!      CHARACTER*2, allocatable :: atom(:), mol(:,:)
      CHARACTER*2 atom(4), mol(4,4)

      nunit1=90
      open(nunit1, file = 'chem.inp', status = 'unknown', action = 'read')
      read(nunit1,10) N
 10   FORMAT(i2)
!      allocate(mol(N,N))
!      allocate(atom(N)) 
      do i=1, N
      read(nunit1, 20) atom(i), mol(i,:)
 20   FORMAT(a2, 2X, <N>(a2))
      enddo

     

     
      close(nunit1)


      end subroutine




      SUBROUTINE Kmol(T, mol, Kn)

!     From Tsuji, 1973
!     now from Sauval&Tatum 1984

      IMPLICIT NONE 
      integer, parameter :: Nm=10
      logical inverse
      TYPE Molecule
       character*2 name
       real*8 coeff(5)
      END TYPE Molecule
  
      TYPE(MOLECULE) FC(Nm)
      
     
      REAL*8 T, logK, Kp, Kn, corr, phi(5), DISS(2,Nm), DISS_T(2,Nm)
      REAL*8 loge, phiT,  keV_K, k_CGS
      INTEGER i, number
!      DIMENSION FC(6,Nm)
      DATA loge /0.434294/
      CHARACTER*2 mol
      CHARACTER*2 molh     

      DATA keV_K /8.617343E-5/ !! eV/K
      DATA k_CGS /1.3807E-16/ !! erg/K


!       DATA FC / 
!     * Molecule('H2',(/1.2739E1,-5.1172E0,1.2572E-1,-1.4149E-2,6.3021E-4/)),
!     * Molecule ('CH',(/1.2135E1,-4.0760E0,1.2768E-1,-1.5473E-2,7.2661E-4/)), 
!     * Molecule ('NH',(/1.2033E1,-3.8435E0,1.3629E-1,-1.6643E-2,7.8691E-4/)),
!     * Molecule('OH',(/1.2371E1,-5.0578E0,1.3822E-1,-1.6547E-2,7.7224E-4/)),
!     * Molecule ('C2',(/1.2804E1,-6.5178E0,9.7719E-2,-1.2739E-2,6.2603E-4/)),
!     * Molecule ('CN',(/1.2805E1,-8.2793E0,6.4162E-2,-7.3627E-3,3.4666E-4/)),
!     * Molecule('CO',(/1.3820E1,-1.1795E1,1.7217E-1,-2.2888E-2,1.1349E-3/)),
!     * Molecule ('N2',(/1.3590E1,-1.0585E1,2.2067E-1,-2.9997E-2,1.4993E-3/)),
!     * Molecule ('NO',(/1.2831E1,-7.1964E0,1.7349E-1,-2.3065E-2,1.1380E-3/)),
!     * Molecule ('O2',(/1.3228E1,-5.5181E0,6.9935E-2,-8.1511E-3,3.7970E-4/))/



!     ************************************Sauval&Tatum*************************** 
      DATA FC /
     * Molecule('H2',(/11.1759, -0.8735, -0.7470, 0.2748, 0./)),
     * Molecule ('CH',(/10.5263, -0.5284, -0.7239, 0., 0./)),
     * Molecule ('NH',(/10.4609, -0.7387, -0.5713, 0., 0./)),
     * Molecule('OH',(/10.7881, -0.8762, -0.5436, 0., 0./)),
     * Molecule ('C2',(/11.4576, -0.4458, -0.1818, 0., 0./)),
     * Molecule ('CN',(/11.4479, -0.4840, -0.4160, -0.9435, 0.8380/)),
     * Molecule('CO',(/12.2263, -0.8829, -0.1230, -0.3226, 0./)),
     * Molecule ('N2',(/11.8838, -0.8915, 0.2929, -1.4220, 0.9007/)), 
     * Molecule ('NO',(/11.2253, -0.8143, 0.0446, -0.4529, 0./)),
     * Molecule ('O2',(/11.8558, -0.5309, -0.6214, 0., 0./))/ 
!     ************************************Sauval&Tatum*************************** 









      DATA DISS/   'H2',  4.478,   !! eV
     *             'CH',  3.465,
     *             'NH',  3.470,
     *             'OH',  4.392,
     *             'C2',  6.210,
     *             'CN',  7.760,
     *             'CO',  11.091,
     *             'N2',  9.7594,
     *             'NO',  6.4968,
     *             'O2',  5.1156/

      DATA DISS_T/ 'H2',  4.4781,   !! eV
     *             'CH',  3.465,
     *             'NH',  3.470,
     *             'OH',  4.392,
     *             'C2',  6.210,
     *             'CN',  7.760,
     *             'CO',  11.092,
     *             'N2',  9.7594,
     *             'NO',  6.4968,
     *             'O2',  5.1156/ 

     
      number=0

      inverse=.false.

      molh=mol
      
 10   DO i=1, Nm 
   
      if (molh .eq. FC(i)%name) then
      number=i
      endif

      ENDDO


      if (number .eq. 0.) then
      molh=mol(2:2)//mol(1:1)
      inverse=.true.
      goto 10
      endif

      if ((number .eq. 0.) .and. inverse) then
      stop 'chemeq.for: wrong molecule'
      endif

      
      phiT=log10(5040./T)
      phi(1)=1.
      phi(2)=phiT
      phi(3)=phi(2)*phiT
      phi(4)=phi(3)*phiT
      phi(5)=phi(4)*phiT
      
      logK=0

      DO i=1, 5
      logK=logK+FC(number)%coeff(i)*phi(i)
      ENDDO


      corr=loge*(DISS_T(2,number)-DISS(2,number))/(keV_K*T)
       
      logK=logK+corr-DISS(2, number)*(10.**phiT)

      logK=logK+1.  ! conversion to CGS
     

      Kp=10.**logK

      Kn=Kp/(k_CGS*T)

      end subroutine


      SUBROUTINE mnewt(ntrial,x,n,tolx,tolf, T_nl, atcon, atom, mol, NATOM)

      INTEGER n,NN, ntrial,NP
      REAL*8 tolf,tolx
      PARAMETER (NP=4)
      PARAMETER (NN=4)
CU    USES lubksb,ludcmp,usrfun
      INTEGER i,k,indx(4)

      real*8 fjac(4,4), fvec(4), atcon(4), x(4)

      CHARACTER*2 atom(4), mol(4,4)
      REAL*8 d,errf,errx,T_nl,p(4)
      do 14  k=1,ntrial

        call fvecjac(x,n,fvec,fjac,  T_nl, atcon, atom, mol, NATOM)
        errf=0.
        do 11 i=1,n
          errf=errf+abs(fvec(i))
11      continue

        if(errf.le.tolf)return
        do 12 i=1,n
          p(i)=-fvec(i)
12      continue
        call ludcmp(fjac,n,NP,indx,d)
        call lubksb(fjac,n,NP,indx,p)

        errx=0.
        do 13 i=1,n
          errx=errx+abs(p(i))
          x(i)=x(i)+p(i)
13      continue
        if(errx.le.tolx)return
14    continue
      return
      end subroutine




      SUBROUTINE lubksb(a,n,np,indx,b)
      INTEGER n,np,indx(4)
      REAL*8 b(4)
      INTEGER i,ii,j,ll
      REAL*8 sum
!      real*8, allocatable :: a(:,:)
      real*8 a(4,4)
      ii=0
      do 12 i=1,n
        ll=indx(i)
        sum=b(ll)
        b(ll)=b(i)
        if (ii.ne.0)then
          do 11 j=ii,i-1
            sum=sum-a(i,j)*b(j)
11        continue
        else if (sum.ne.0.) then
          ii=i
        endif
        b(i)=sum
12    continue
      do 14 i=n,1,-1
        sum=b(i)
        do 13 j=i+1,n
          sum=sum-a(i,j)*b(j)
13      continue
        b(i)=sum/a(i,i)
14    continue
      return

      end subroutine


      SUBROUTINE ludcmp(a,n,np,indx,d)
      INTEGER n,np,indx(4),NMAX
      REAL*8 d,TINY
 !     real*8, allocatable :: a(:,:)
      real*8 a(4,4)
      PARAMETER (NMAX=500,TINY=1.0e-20)
      INTEGER i,imax,j,k
      REAL*8 aamax,dum,sum,vv(NMAX)
      d=1.
      do 12 i=1,n
        aamax=0.
        do 11 j=1,n
          if (abs(a(i,j)).gt.aamax) aamax=abs(a(i,j))
11      continue
        if (aamax.eq.0.) pause 'singular matrix in ludcmp'
        vv(i)=1./aamax
12    continue
      do 19 j=1,n
        do 14 i=1,j-1
          sum=a(i,j)
          do 13 k=1,i-1
            sum=sum-a(i,k)*a(k,j)
13        continue
          a(i,j)=sum
14      continue
        aamax=0.

        do 16 i=j,n
          sum=a(i,j)
          do 15 k=1,j-1
            sum=sum-a(i,k)*a(k,j)
15        continue
          a(i,j)=sum
          dum=vv(i)*abs(sum)
          if (dum.ge.aamax) then
            imax=i
            aamax=dum
          endif
16      continue
        if (j.ne.imax)then
          do 17 k=1,n
            dum=a(imax,k)
            a(imax,k)=a(j,k)
            a(j,k)=dum
17        continue
          d=-d
          vv(imax)=vv(j)
        endif
        indx(j)=imax
        if(a(j,j).eq.0.)a(j,j)=TINY

        if(j.ne.n)then
          dum=1./a(j,j)
          do 18 i=j+1,n
            a(i,j)=a(i,j)*dum
18        continue
        endif
19    continue
      return
      end subroutine


     
      end module
