#DEBUG_FLAGS= -traceback -debug inline-debug-info,all
#DEBUG_FLAGS= -check all -fpe0 -warn none -traceback -debug extended
DEBUG_FLAGS= -warn none
#DEBUG_FLAGS= -traceback -heap-arrays -check bounds -check all -assume realloc_lhs
#PROFILING= -pg
#DEBUG_FLAGS= -traceback -check all -check bounds
#F90FLAGS=-O3 -g -warn ignore_loc,nodeclarations, -fp-model fast=1 -r8 -real-size 64 -integer-size 32 -warn all -132 ${DEBUG_FLAGS} $(PROFILING) 
F90FLAGS=-O3 -g -fp-model fast=1 -r8 -real-size 64 -integer-size 32 -132 ${DEBUG_FLAGS} $(PROFILING)
LDFLAGS=-O -X $(PROFILING)

ifeq ($(COMPILER),intel)
F90FLAGS       += -module $(OUT)
LDFLAGS        += -module $(OUT)
ifeq ($(ARCH),64)
OUT=../obj/
F90             =ifort
LIBRARY_PATH    =/opt/intel/Compiler/current/lib/intel64/
LD_LIBRARY_PATH =/opt/intel/Compiler/current/lib/intel64/
#F90FLAGS       += -mkl=sequential -diag-disable=cpu-dispatch -fPIC -xSSE4.2 -axAVX,CORE-AVX-I,CORE-AVX2 -mcmodel medium -shared-intel
#F90FLAGS       += -mkl=sequential -diag-disable=cpu-dispatch -fPIC -CORE-AVX-I,CORE-AVX2 -mcmodel medium -shared-intel
F90FLAGS       += -mkl=sequential -diag-disable=cpu-dispatch -fPIC -march=core-avx2 -mcmodel medium -shared-intel
#F90FLAGS       += -traceback -check-all -check-bounds
LDFLAGS        += -L/opt/intel/Compiler/current/lib/intel64/ -Belf64-x86-64 -mkl=sequential -mcmodel medium -shared-intel
#LDFLAGS        += -traceback -check-all -check-bounds
#F90FLAGS       += -mkl=sequential -diag-disable=cpu-dispatch -fPIC -xSSE4.2 -axAVX,CORE-AVX-I,CORE-AVX2 -mcmodel medium -shared-intel -check all
#LDFLAGS        += -L/opt/intel/Compiler/current/lib/intel64/ -Belf64-x86-64 -mkl=sequential -mcmodel medium -shared-intel -check all
#F90FLAGS       += -mkl=sequential -diag-disable=cpu-dispatch -fPIC -xSSE4.2 -axAVX,CORE-AVX-I,CORE-AVX2
#LDFLAGS        += -L/opt/intel/Compiler/current/lib/intel64/ -Belf64-x86-64 -mkl=sequential
SET__=1
endif # arch=64
endif # COMPILER=intel

ifndef SET__
.PHONY: FAIL
FAIL:
	-echo "unknown arch/compiler combination: $(ARCH)/$(COMPILER)"
endif

.PHONY: clean all
OBJS=$(addprefix ${OUT},$(SRCS:.for=.o))

all: $(PROG)-all

$(PROG)-all: $(OBJS)
	mkdir -p ${OUT}
	$(F90) $(LDFLAGS) -o $(PROG) $(OBJS)

$(PROG)-debug: $(OBJS)
	$(F90) $(LDFLAGS) -o $(PROG) $(OBJS)
clean:
	rm -f $(PROG) $(OBJS)

debug: $(PROG)-debug

.SUFFIXES: $(SUFFIXES) .for

${OUT}second.for  ${OUT}inv.o: error.for 

${OUT}%.o:%.for
	@tput bold
	@echo -e "*** `basename $(F90)` $< \033[0m"
	@$(F90) $(F90FLAGS) -o $@ -c $<

include make/Makefile.deps
